#!/bin/csh -f
#FRE scheduler-options
# 
# $Id: runscript.template.main,v 18.0.2.16 2011/03/29 18:30:49 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Runscript Template - NCCS Version
# ------------------------------------------------------------------------------
# arl    Ver   18.0  Merged revision 1.1.2.34 onto trunk            March 10
# afy -------------- Branch 18.0.2 -------------------------------- April 10
# afy    Ver   1.00  Add flagOutput(Type|Format|Archive) constants  April 10
# afy    Ver   1.01  Remove flagCombine* settable constants         April 10
# afy    Ver   1.02  Modify patternGrepRegion                       April 10
# afy    Ver   1.03  Modify region files processing (renaming)      April 10
# afy    Ver   1.04  Source the "fre.cshrc" file                    April 10
# afy    Ver   1.05  Remove FREROOT settable constant               April 10
# afy    Ver   1.06  Modify aliases (use `which` instead of prefix) April 10
# afy    Ver   1.07  Use prepare_dir.csh to handle directories      April 10
# afy    Ver   2.00  Remove flagRemake settable constant            May 10
# afy    Ver   2.01  Remove siteDir settable constant               May 10
# afy    Ver   2.02  Modify hsmget aliase (use hsmSiteDir)          May 10
# afy    Ver   2.03  Add freCommandsHomeDir settable constant       May 10
# afy    Ver   2.04  Add environment settings for FRE submodules    May 10
# afy    Ver   3.00  Don't allow to redefine the FRE_COMMANDS_HOME  May 10
# afy    Ver   3.01  Set the FREROOT variable (temporarily?)        May 10
# afy    Ver   4.00  Don't remove the workDir in case of errors     June 10
# afy    Ver   5.00  Add timeStampFormat settable constant          June 10
# afy    Ver   5.01  Modify alias "time_stamp"                      June 10
# afy    Ver   6.00  Process variables FRE_STAGE/FRE_INPUT_DIR      June 10
# afy    Ver   6.01  Add modules initialization                     June 10
# afy    Ver   6.02  Modify system aliases (use `which`)            June 10
# afy    Ver   6.03  Modify 'aprun' call (save stderr as well)      June 10
# arl    Ver   7.00  Modify alias 'mppnccombine'                    August 10
# arl    Ver   7.01  Modify alias 'combine_parallel'                August 10
# afy    Ver   8.00  Add check for 'fre-transfer' module            August 10
# afy    Ver   8.01  Add check for 'fre-nctools' module             August 10
# afy    Ver   9.00  Balance 'set echo'/'unset echo'                August 10
# afy    Ver   9.01  Add online combining similar to the GFDL one   August 10
# afy    Ver   9.02  Modify alias 'send_file'                       August 10
# afy    Ver   9.03  Rename alias 'qsub' => 'submit'                August 10
# afy    Ver   9.04  Modify alias 'submit' (add option -V)          August 10
# afy    Ver   9.05  Modify call to 'combine*' (add 'stdout')       August 10
# afy    Ver   9.06  Add alias 'tar'                                August 10
# afy    Ver   9.07  Add flagOutputCheck settable constant          August 10
# afy    Ver   9.08  Add constant 'patternSedRestartProduction'     August 10
# afy    Ver   9.09  Add constant 'patternSedRestartRegression'     August 10
# afy    Ver   9.10  Add restart archives checking                  August 10
# afy    Ver   9.11  New pragmas for flags/constants/variables      August 10
# afy    Ver   9.12  Merge flagTransfer* settable constants         August 10
# afy    Ver   9.13  Fix ascii/restart directories creation         August 10
# afy    Ver   9.14  Remove combineList variable                    August 10
# afy    Ver  10.00  Rename combine_parallel.csh => fresavehist     August 10
# afy    Ver  11.00  Add refine diagnostics scripts handling        October 10
# afy    Ver  11.01  Modify 'npes' type (const => var)              October 10
# afy    Ver  11.02  Don't adjust 'ptmpDir' from FRE_INPUT_DIR      October 10
# afy    Ver  11.03  Add branch for FRE_STAGE == CHAIN              October 10
# afy    Ver  11.04  Renamings/additions according to NCRC version  October 10
# afy    Ver  11.05  Modify gridSpec/initCond loading (branch 'nc') October 10
# afy    Ver  11.06  Remove work directory in staging mode          October 10
# afy    Ver  12.00  Modify all 'find' calls (no -exec/-regex)      October 10
# afy    Ver  12.01  Add alias 'find' (= lfs find)                  October 10
# afy    Ver  13.00  Modify restarts combining (check, pattern)     November 10
# afy    Ver  13.01  Rename flag*CombineType => flag*StagingType    November 10
# afy    Ver  13.02  Rename flag*Combine => flag*CombineHistory     November 10
# afy    Ver  13.03  Use hsmget to copy the executable              November 10
# afy    Ver  13.04  Use compare_dual.csh to check restarts         November 10
# afy    Ver  13.05  Use compare_dual.csh to check history (new!)   November 10
# afy    Ver  13.06  Add banners (prologue/irun/epilogue)           November 10
# afy    Ver  14.00  Rename alias 'aprun' => 'runCommand'           December 10
# afy    Ver  14.01  Modify banners (prologue => PBS_JOBNAME)       December 10
# afy    Ver  14.02  Standardize the script beginning               December 10
# afy    Ver  14.03  Make all the '*Time' constants settable        December 10
# afy    Ver  14.04  Add settable constant 'mailMode'               December 10
# afy    Ver  15.00  Add settable constant 'platform'               March 11
# afy    Ver  15.01  Add settable constant 'target'                 March 11
# afy    Ver  15.02  Don't check presence of refine scripts         March 11
# afy    Ver  15.03  Improve the 'reload_commands' file handling    March 11
# afy    Ver  15.04  Add the 'queue_commands' file processing       March 11
# afy    Ver  15.05  Add alias 'submitNext'                         March 11
# afy    Ver  15.06  Add settable alias 'runCommand'                March 11
# afy    Ver  16.00  Prepend 'cp -p' calls by 'ln -f' calls         March 11
# afy    Ver  16.01  Remove 'fre-transfer' submodule                March 11
# afy    Ver  16.02  Remove 'FREROOT' environment variable          March 11
# afy    Ver  16.03  Add aliases '(set|get)StripingMode'            March 11
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2011
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
# 

#===============================================================================
#FRE version-info
#===============================================================================

  echo ====== FRE RUNSCRIPT ======
  echo "Starting on `date`"
  echo "Starting on $HOST $HOSTNAME"
  set echo
  unalias *

  # ---------------- initialize environment modules

  unset echo
  source $MODULESHOME/init/tcsh
  module load banner 
  setenv COLUMNS 148
  set echo

  # ---------------- adjust stdout permissions, define constants for non-scheduler runs

  if ( $?PBS_ENVIRONMENT ) then
    if ( $PBS_ENVIRONMENT == 'PBS_BATCH' ) then
      if ( $?PBS_O_WORKDIR ) then
        chmod 644 $PBS_O_WORKDIR/$PBS_JOBID.OU
      endif
    endif 
  else
    set -r PBS_JOBID = '000000'
    set -r PBS_JOBNAME = 'STDIN'
    set -r PBS_QUEUE = 'batch'
  endif

  banner $PBS_JOBNAME

################################################################################
#------------ global constants, variables and aliases, set by frerun -----------
################################################################################

  #FRE const(platform)
  #FRE const(target)
  #FRE const(name)
  #FRE const(rtsxml)
  #FRE const(freCommandsHomeDir)
  #FRE const(stdoutDir)
  #FRE const(workDir)
  #FRE const(archiveDir)
  #FRE const(scriptName)
  #FRE const(ppRefineDiagScriptNames)
  #FRE const(executable)
  #FRE const(segmentsPerSimulation)
  #FRE const(segmentsPerJob)
  #FRE const(jobsPerSimulation)
  #FRE const(combineFreq)
  #FRE const(monthslist)
  #FRE const(dayslist)
  #FRE const(timeStampFormat)
  #FRE const(baseDate)
  #FRE const(mailMode)

  #FRE const(outputStagerQueue)
  #FRE const(outputStagerTime)

  #FRE const(fileSenderQueue)
  #FRE const(fileSenderTimeAscii)
  #FRE const(fileSenderTimeRestarts)
  #FRE const(fileSenderTimeHistory)

  #FRE flag(flagRunType)
  #FRE flag(flagOutputType)
  #FRE flag(flagOutputFormat)
  #FRE flag(flagOutputStagingType)
  #FRE flag(flagOutputCombineHistory)
  #FRE flag(flagOutputArchive)
  #FRE flag(flagOutputPostProcess)
  #FRE flag(flagOutputTransfer)
  #FRE flag(flagOutputCheck)

  #FRE var(npes)
  #FRE var(ptmpDir)
  #FRE var(outputDir)
  #FRE var(gridSpec)
  #FRE var(initCond)

  #FRE alias(runCommand)

################################################################################
#------------------------ global environment settings --------------------------
################################################################################

  # ---------------- FRE environment variables, which have to be set after the platform csh:

  # FRE_NCTOOLS_HOME	- root of the fre-nctools module

  # ---------------- FRE scripts/executables, which have to be accessible via the PATH after the platform csh:

  # combine-ncc		- part of the fre-nctools module
  # compare_dual.csh	- part of the fre-commands module
  # hsmget		- part of the fre-commands module 
  # mppnccombine	- part of the fre-nctools module
  # prepare_dir.csh	- part of the fre-commands module
  # send_file		- part of the fre-commands module
  # time_stamp.csh	- part of the fre-commands module

  # ---------------- commands, copied from XML (setup/platform/csh)

  unset echo
  #FRE setup-platform-csh
  module list
  set echo

  # ---------------- exit if no fre-nctools module is loaded

  if ( ! $?FRE_NCTOOLS_HOME ) then
    unset echo
    echo "ERROR: The script '$scriptName' must load a 'fre-nctools' module"
    set echo
    exit 1
  endif

  # ---------------- the settings below aren't changeable

  setenv FRE_COMMANDS_HOME $freCommandsHomeDir
  setenv PATH $FRE_COMMANDS_HOME/bin:$PATH

  # ---------------- adjust the job name for interactive runs 

  if ( $PBS_JOBNAME == 'STDIN' ) then
    setenv PBS_JOBNAME $name
  endif

################################################################################
#------------------------ global constants and aliases -------------------------
################################################################################

  set -r beginruntime = `date "+%s"`
  set -r outputPath = `echo $outputDir | perl -pe "s/.*?$USER\///"`
  set -r jobId = `echo $PBS_JOBID | sed -r 's/^([0-9]+).*$/o\1/'`

  # ---------------- for compatibility only

  set -r work = $workDir

  # ---------------- HSM site-dependent directory

  set -r hsmSiteDir = $freCommandsHomeDir/site/doe

  # ---------------- top directory for all the HSM-copied files

  set -r hsmDir = $workDir/hsm

  # ---------------- selection patterns for grep

  set -r patternGrepTail = '\.[0-9]{4}$'
  set -r patternGrepAscii = '\<out\>|\<results\>'
  set -r patternGrepRestarts = '\<res\>'
  set -r patternGrepRestartsOrNC = '\<res\>|\<nc\>'
  set -r patternGrepRegion = '^rregion'
  set -r patternGrepNC = '\<nc\>'

  # ---------------- striping parameters

  set -r stripeSize = 1M
  set -r stripeCount = 4

  # ---------------- FRE string date generation for file name labels

  alias timeStamp `which time_stamp.csh` -f $timeStampFormat

  # ---------------- FRE directory making/cleaning utility

  alias prepareDir `which prepare_dir.csh`

  # ---------------- FRE dual archives comparing utility

  alias compareDual `which compare_dual.csh`

  # ---------------- FRE postprocessing utility

  alias frepp `which frepp` -v -c split -s

  # ---------------- FRE data copying between work directory and archive directory via ptmp directory

  alias hsmget `which hsmget` -q -t -m $hsmSiteDir/hsmget.mk -w $hsmDir -p '$ptmpDir' -a /

  # ---------------- FRE script for sending files to GFDL

  alias fileSender `which send_file`

  # ---------------- FRE netCDF files combining utilities

  alias mppnccombine `which mppnccombine` -64
  alias slmnccombine `which combine-ncc` 

  # ---------------- FRE output stager
 
  alias outputStager $freCommandsHomeDir/site/doe/fresavehist

  # ---------------- HPSS access command

  alias hsi `which hsi` -q

  # ---------------- batch scheduler submit commands

  alias submit `which qsub`
  alias submitNext `which qsub` -q '$queue'
  alias submitFileSender `which qsub` -q $fileSenderQueue -m $mailMode -V
  alias submitOutputStager `which qsub` -l size=48,walltime=$outputStagerTime -q $outputStagerQueue -m $mailMode -V

  # ---------------- archiving command

  alias tar `which tar` -b 1024

  # ---------------- finding command

  alias find `which lfs` find

  # ---------------- striping mode commands

  alias setStripingMode `which lfs` setstripe -s $stripeSize -c $stripeCount
  alias getStripingMode `which lfs` getstripe

  # ---------------- unique timestamp

  alias unique 'date +%s.$$'

################################################################################
#------------------------------ environment checks -----------------------------
################################################################################

  # ---------------- some global configuration

  limit stacksize unlimited
  limit coredumpsize unlimited
  limit
      
  # ---------------- exit if not running on Cray XT*

  set machine = `uname -m`

  if ( $machine != 'x86_64' ) then
    unset echo
    echo "ERROR: The script '$scriptName' is intended for platform x86_64"
    set echo
    exit 1
  endif

  unset machine

  # ---------------- exit if number of days/months/hours is not equal to number of segments per job

  if ( $#dayslist != $segmentsPerJob || $#monthslist != $segmentsPerJob) then
    unset echo
    echo "ERROR: dayslist and monthslist must be equal to a number of segments per job"
    set echo
    exit 1
  endif

  if ( $?hourslist ) then
    if ( $#hourslist != $segmentsPerJob ) then
      unset echo
      echo "ERROR: hourslist must be equal to a number of segments per job"
      set echo
      exit 1
    endif
  endif

################################################################################
#----------------------------- global variables --------------------------------
################################################################################

  set continueFlag = 1

  if ( $?FRE_PROJECT ) then  
    set project = $FRE_PROJECT
  else
    set project = ""
  endif

  set queue = $PBS_QUEUE

  set combineList = ( )

  @ ireload = 1
  @ irun = 1

################################################################################
#--------------------------- before the main loop ------------------------------
################################################################################

  # ---------------- print the script parameters

  unset echo 
  echo $name
  echo ${npes}pe_${segmentsPerJob}run
  set echo

  # ---------------- commands, copied from XML (experiment/runtime/csh)

  #FRE experiment-runtime-csh

  # ---------------- initialize reloading (production runs only)

  if ( $?flagRunTypeProduction ) then

    set reload_file = $outputDir/ascii/reload_commands

    if ( -f $reload_file ) then
      if ( -r $reload_file ) then
	source $reload_file
      else
	unset echo
	echo "ERROR: The reload file '$reload_file' is not readable"
        set echo
	exit 1
      endif
    endif

    @ currentSeg = ( $ireload - 1 ) * $segmentsPerJob + $irun

    set queue_file = $outputDir/ascii/queue_commands

    if ( -f $queue_file ) then
      if ( -r $queue_file ) then
	source $queue_file
      else
	unset echo
	echo "ERROR: The queue file '$queue_file' is not readable"
        set echo
	exit 1
      endif
    endif

    if ( ! $continueFlag ) then
      unset echo
      echo "NOTE: Stopping execution"
      set echo
      exit 0
    endif

  endif

  # ---------------- set up working directory structure

  prepareDir $workDir || exit 1
  setStripingMode $workDir
  getStripingMode $workDir | grep -F 'stripe'

  prepareDir $workDir/INPUT || exit 1
  prepareDir $workDir/RESTART || exit 1

  # ---------------- input data loading

  cd $workDir

  set dataFilesNotOK = ()

#dataFiles_from_xml

  if ( $#dataFilesNotOK > 0) then
    unset echo
    foreach dataFile ( $dataFilesNotOK )
      echo "A problem with the data file: $dataFile"
    end
    echo "ERROR: Failed to copy data files"
    set echo
    exit 1
  endif

  @ gridSpecStatus = 0

  if ( ( $gridSpec:e == 'cpio' || $gridSpec:e == 'tar' ) && $gridSpec:r:e == 'nc' ) then
    hsmget $gridSpec:r:r:s+/++/\* && \
    find $hsmDir$gridSpec:r:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ gridSpecStatus = $status
  else if ( ( $gridSpec:e == 'cpio' || $gridSpec:e == 'tar' ) && $gridSpec:r:e != 'nc' ) then
    hsmget $gridSpec:r:s+/++/\* && \
    find $hsmDir$gridSpec:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ gridSpecStatus = $status
  else if ( $gridSpec:e == 'nc' ) then
    hsmget $gridSpec:s+/++ && \
    ln -f $hsmDir/$gridSpec:s+/++ $workDir/INPUT/grid_spec.nc
    @ gridSpecStatus = $status
  else if ( $gridSpec != "" && -d "$gridSpec" ) then
    hsmget $gridSpec:s+/++/\* && \
    find $hsmDir$gridSpec -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ gridSpecStatus = $status
  else if ( $gridSpec != "" && -f "$gridSpec" ) then
    hsmget $gridSpec:s+/++ && \
    ln -f $hsmDir/$gridSpec:s+/++ $workDir/INPUT/grid_spec.nc
    @ gridSpecStatus = $status
  endif

  if ( $gridSpecStatus ) then
    unset echo
    echo "ERROR: Failed to copy grid specification"
    set echo
    exit 1
  endif

  unset gridSpecStatus 

  @ initCondStatus = 0 

  if ( ( $initCond:e == 'cpio' || $initCond:e == 'tar' ) && $initCond:r:e == 'nc' ) then
    hsmget $initCond:r:r:s+/++/\* && \
    find $hsmDir$initCond:r:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ initCondStatus = $status
  else if ( ( $initCond:e == 'cpio' || $initCond:e == 'tar' ) && $initCond:r:e != 'nc' ) then
    hsmget $initCond:r:s+/++/\* && \
    find $hsmDir$initCond:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ initCondStatus = $status
  else if ( $initCond:e == 'nc' ) then
    hsmget $initCond:s+/++ && \
    ln -f $hsmDir/$initCond:s+/++ $workDir/INPUT/.
    @ initCondStatus = $status
  else if ( $initCond != "" && -d "$initCond" ) then
    hsmget $initCond:s+/++/\* && \
    find $hsmDir$initCond -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ initCondStatus = $status
  else if ( $initCond != "" && -f "$initCond" ) then
    hsmget $initCond:s+/++ && \
    ln -f $hsmDir/$initCond:s+/++ $workDir/INPUT/.
    @ initCondStatus = $status
  endif

  if ( $initCondStatus ) then
    unset echo
    echo "ERROR: Failed to copy initial conditions"
    set echo
    exit 1
  endif

  unset initCondStatus 

  # ---------------- the executable loading

  hsmget $executable:s+/++

  # ---------------- commands, copied from XML (experiment/input/csh[not(@type="always") and not(@type="postInit")])

  #FRE experiment-input-csh-init

  cd $workDir

  # ---------------- list files in the INPUT directory

  unset echo
  ls -l INPUT/*
  set echo

  # ---------------- normal exit if in the input data staging mode

  if ( $?FRE_STAGE ) then
    if ( $FRE_STAGE == 'INPUT' ) then
      rm -rf $workDir
      unset echo
      echo end_of_input
      echo "NOTE: Natural end-of-input for $scriptName."
      set echo
      exit 0
    else if ( $FRE_STAGE == 'CHAIN' ) then
      pushd $stdoutDir
      if ( "$project" != "" ) then
        submit -A $project -v FRE_PROJECT=$project $scriptName
      else
        submit $scriptName
      endif
      popd
      rm -rf $workDir
      unset echo
      echo end_of_chaining
      echo "NOTE: Natural end-of-chaining for $scriptName."
      set echo
      exit 0
    endif
  endif 

  # ---------------- executable and tables loading

  ln -f $ptmpDir$executable . || cp -pf $ptmpDir$executable .

  if ( $status ) then
    unset echo
    echo "ERROR: Failed to copy the executable"
    set echo
    exit 1
  endif

#diagTable_from_xml
#fieldTable_from_xml

  touch data_table

#dataTable_from_xml
#tracerTreeTable_from_xml
#tracerTreeInit_from_xml

  # ---------------- check and prepare refine diagnostics scripts

  if ( $?flagOutputStagingTypeStaged || $?flagOutputStagingTypeBySegment ) then

    if ( $#ppRefineDiagScriptNames > 0 ) then

      set ppRefineDiagScriptNamesList = ""

      foreach ppRefineDiagScriptName ( $ppRefineDiagScriptNames )
        if ( $ppRefineDiagScriptNamesList == "" ) then
          set ppRefineDiagScriptNamesList = $ppRefineDiagScriptName
        else
          set ppRefineDiagScriptNamesList = $ppRefineDiagScriptNamesList,$ppRefineDiagScriptName
        endif
      end

    endif

  endif

################################################################################
#------------------------------- the main loop ---------------------------------
################################################################################

  while ( $irun <= $segmentsPerJob )

    banner $irun/$segmentsPerJob

    # ---------------- reload the queue file and exit if it has been requested

    if ( $?flagRunTypeProduction ) then

      if ( -f $queue_file ) then
	if ( -r $queue_file ) then
	  source $queue_file
	else
	  unset echo
	  echo "ERROR: The queue file '$queue_file' is not readable"
          set echo
	  exit 1
	endif
      endif

      if ( ! $continueFlag ) then
	unset echo
	echo "NOTE: Stopping execution"
	set echo
	exit 0
      endif

    endif

    # ---------------- commands, copied from XML (experiment/input/csh[@type="always" or @type="postInit"])

    #FRE experiment-input-csh-always-or-postinit

    cd $workDir

    # ---------------- set timing parameters

    set months = $monthslist[$irun]
    set days = $dayslist[$irun]

    # ---------------- include namelists from XML

#namelists_from_xml

    # ---------------- print run parameters

    unset echo
    echo loop_$irun/$segmentsPerJob
    echo run
    set echo

    # ---------------- prepare MPI call, execute it, analyze results

    if ( $target =~ '*openmp*' ) then
      if ( ! $?OMP_NUM_THREADS ) setenv OMP_NUM_THREADS 1
    else
      unsetenv OMP_NUM_THREADS
    endif 

    runCommand |& tee fms.out

    if ( $status ) then
      @ cores_dumped = 0
      if ( ! $?MPI_COREDUMP_DEBUGGER ) setenv MPI_COREDUMP_DEBUGGER 'gdb -batch'
      echo where > .gdbinit
      foreach corefile ( `ls core*` )
        echo "dump of core file $corefile" > $corefile.out
        $MPI_COREDUMP_DEBUGGER $executable:t $corefile >> $corefile.out &
        @ cores_dumped++
      end
      unset echo
      wait
      set MPI_FAIL
      set outputDir = ${outputDir}_crash
      prepareDir $outputDir/ascii || exit 1
      setStripingMode $outputDir/ascii
      getStripingMode $outputDir/ascii | grep -F 'stripe'
      if ( $cores_dumped > 0 ) then
        cat core*.out >> fms.out
        cat core*.out
        echo "ERROR: in mpirun, core dumped: run $ireload, loop $irun" 
      else
        set cdsize = `limit coredumpsize`
        echo "ERROR: in mpirun, no cores produced: run $ireload, loop $irun"
        echo "NOTE: You are using $cdsize"
      endif
      set echo
    endif

    # ---------------- generate date for file names

    set begindate = `timeStamp -b`
    if ( $begindate == 'no_time_stamp' ) set begindate = tmp`date '+%j%H%M%S'`
    set enddate = `timeStamp -e`
    if ( $enddate == 'no_time_stamp' ) set enddate = tmp`date '+%j%H%M%S'`
    set fyear = `echo $enddate | cut -c -4`

    # ---------------- commands, copied from XML (experiment/postProcess/csh)

    #FRE experiment-postprocess-csh

    cd $workDir

    # ---------------- remove time_stamp.out file

    if ( -f time_stamp.out ) rm -f time_stamp.out

    # ---------------- save ascii files: online

    set asciiFiles = ( `ls -1 | egrep "$patternGrepAscii"` )

    if ( $#asciiFiles > 0 ) then

      set asciiArchive = $outputDir/ascii/$begindate.ascii_out.tar

      if ( ! -e $asciiArchive:h ) then
        prepareDir $asciiArchive:h || exit 1
        setStripingMode $asciiArchive:h
        getStripingMode $asciiArchive:h | grep -F 'stripe'
      endif

      foreach file ( $asciiFiles )
	mv $file $begindate.$file
      end

      set asciiArchiveUnique = $asciiArchive.`unique`
      ls -1 | egrep "$patternGrepAscii" | tar -cf $asciiArchiveUnique --files-from - --remove-files
      mv -f $asciiArchiveUnique $asciiArchive
      unset asciiArchiveUnique

      pushd $asciiArchive:h
      set logName = $scriptName:t.$jobId.hsi.A.$begindate.log
      hsi "mkdir -p $outputPath/ascii; cd $outputPath/ascii; put $asciiArchive:t" >& $stdoutDir/$logName &
      unset logName
      popd

      if ( $?flagOutputTransferOn ) then
        pushd $stdoutDir
        set jobName = $scriptName:t.$jobId.file_sender.A.$begindate
        if ( "$project" != "" ) then
	  submitFileSender \
          -A $project \
          -N $jobName \
          -o $stdoutDir/ \
          -l walltime=$fileSenderTimeAscii \
          -v file=$asciiArchive \
          `alias fileSender`
        else
	  submitFileSender \
          -N $jobName \
          -o $stdoutDir/ \
          -l walltime=$fileSenderTimeAscii \
          -v file=$asciiArchive \
          `alias fileSender`
        endif
        unset jobName
        popd
      endif

      unset asciiArchive

    endif

    # ---------------- save restart files, namelist, tables etc. and move them from RESTART to INPUT: online

    pushd $workDir/RESTART

    set restartFiles = ( `ls -1 | egrep "$patternGrepRestartsOrNC"` )

    if ( $#restartFiles > 0 ) then

      set restartArchive = $outputDir/restart/$enddate.tar

      if ( ! -e $restartArchive:h ) then
        prepareDir $restartArchive:h || exit 1
        setStripingMode $restartArchive:h
        getStripingMode $restartArchive:h | grep -F 'stripe'
      endif

      ln -f $workDir/input.nml	. || cp -p $workDir/input.nml	.
      ln -f $workDir/*_table	. || cp -p $workDir/*_table	.
      ln -f $rtsxml		. || cp -p $rtsxml		.
      ln -f $scriptName		. || cp -p $scriptName		.

      set restartArchiveUnique = $restartArchive.`unique`
      ls -1 | egrep "$patternGrepRestartsOrNC" | tar -cf $restartArchiveUnique --files-from -
      ls -1 input.nml *_table $rtsxml:t $scriptName:t | tar -rf $restartArchiveUnique --files-from -
      mv -f $restartArchiveUnique $restartArchive
      unset restartArchiveUnique

      if ( $?flagOutputCheckOn ) then
        compareDual $name $JOB_ID $restartArchive
      endif

      if ( $irun < $segmentsPerJob ) then
        find $workDir/INPUT   -maxdepth 1 -type f | egrep "$patternGrepRestarts" | xargs -r rm -f
        find $workDir/RESTART -maxdepth 1 -type f | egrep "$patternGrepRestarts" | xargs -r mv -f -t ../INPUT
        find $workDir/RESTART -maxdepth 1 -type f | egrep "$patternGrepNC"       | xargs -r mv -f -t ../INPUT
      endif

      pushd $restartArchive:h
      set logName = $scriptName:t.$jobId.hsi.R.$enddate.log 
      hsi "mkdir -p $outputPath/restart; cd $outputPath/restart; put $restartArchive:t" >& $stdoutDir/$logName &
      unset logName
      popd

      if ( $?flagOutputTransferOn ) then
        pushd $stdoutDir
        set jobName = $scriptName:t.$jobId.file_sender.R.$enddate
        if ( "$project" != "" ) then
	  submitFileSender \
          -A $project \
          -N $jobName \
          -o $stdoutDir/ \
          -l walltime=$fileSenderTimeRestarts \
          -v file=$restartArchive \
          `alias fileSender`
        else
	  submitFileSender \
          -N $jobName \
          -o $stdoutDir/ \
          -l walltime=$fileSenderTimeRestarts \
          -v file=$restartArchive \
          `alias fileSender`
        endif
        unset jobName
        popd
      endif

    endif

    popd

    # ---------------- combine region files

    set regionFiles = ( `ls -1 | egrep "$patternGrepRegion.*$patternGrepTail" | sed -r "s/$patternGrepTail//g" | sort -u` )

    if ( $#regionFiles > 0 ) then

      set filesNotOK = ()

      foreach file ( $regionFiles )
	set inputFiles = ( `ls -1 | egrep "$file$patternGrepTail"` )
	if ( $#inputFiles > 0 ) then
          ( mppnccombine $file $inputFiles || set filesNotOK = ( $filesNotOK $file ) ; mv -f $file `echo $file | sed "s/$patternGrepRegion//"` && rm -f $inputFiles ) &
	endif
      end
      wait

      if ( $#filesNotOK > 0) then
	unset echo
	foreach file ( $filesNotOK )
	  echo "A problem during combining the region file: $file"
	end
	echo "ERROR: Failed to combine region files"
	set echo
	exit 1
      endif

      unset filesNotOK 

    endif

    # ---------------- combine, save and post-process history files: online

    if ( $?flagOutputStagingTypeOnline ) then

      if ( $?flagOutputCombineHistoryOn ) then

	set historyFiles = ( `ls -1 | egrep "$patternGrepNC.*$patternGrepTail" | sed -r "s/$patternGrepTail//g" | sort -u` )

        if ( $#historyFiles > 0 ) then

          set filesNotOK = ()

	  foreach file ( $historyFiles )
            set inputFiles = ( `ls -1 | egrep "$file$patternGrepTail"` )
            if ( $#inputFiles > 0) then
	      ( mppnccombine $file $inputFiles || set filesNotOK = ( $filesNotOK $file ) ; test -s $file && rm -f $inputFiles ) &
            endif
	  end
	  wait

	  if ( $#filesNotOK > 0) then
	    unset echo
	    foreach file ( $filesNotOK )
	      echo "A problem during combining the history file: $file"
	    end
	    echo "ERROR: Failed to combine history files"
	    set echo
	    exit 1
	  endif

          unset filesNotOK 

        endif

      endif

      set historyCombinedFiles = ( `ls -1 | egrep "$patternGrepNC"$` )

      if ( $#historyCombinedFiles > 0 ) then

        set historyCombinedArchive = $outputDir/history/$begindate.nc.tar

        if ( ! -e $historyCombinedArchive:h ) then       
          prepareDir $historyCombinedArchive:h || exit 1
          setStripingMode $historyCombinedArchive:h
          getStripingMode $historyCombinedArchive:h | grep -F 'stripe'
        endif
      
	foreach file ( $historyCombinedFiles )
	  mv $file $begindate.$file
	end

        set historyCombinedArchiveUnique = $historyCombinedArchive.`unique`
        ls -1 | egrep "$patternGrepNC"$ | tar -cf $historyCombinedArchiveUnique --files-from - --remove-files
        mv -f $historyCombinedArchiveUnique $historyCombinedArchive
        unset historyCombinedArchiveUnique

	if ( $?flagOutputCheckOn ) then
          compareDual $name $JOB_ID $historyCombinedArchive
	endif

	pushd $historyCombinedArchive:h
	set logName = $scriptName:t.$jobId.hsi.H.$begindate.log
	hsi "mkdir -p $outputPath/history; cd $outputPath/history; put $historyCombinedArchive:t" >& $stdoutDir/$logName &
        unset logName
	popd

	if ( $?flagOutputTransferOn ) then
          pushd $stdoutDir
          set jobName = $scriptName:t.$jobId.file_sender.H.$begindate
          if ( "$project" != "" ) then
	    submitFileSender \
            -A $project \
            -N $jobName \
            -o $stdoutDir/ \
            -l walltime=$fileSenderTimeHistory \
            -v file=$historyCombinedArchive \
            `alias fileSender`
          else
	    submitFileSender \
            -N $jobName \
            -o $stdoutDir/ \
            -l walltime=$fileSenderTimeHistory \
            -v file=$historyCombinedArchive \
            `alias fileSender`
          endif
          unset jobName
          popd
	endif

	set combineList = ( $combineList $historyCombinedArchive:t )

        unset historyCombinedArchive

      endif

      set historyUncombinedFiles = ( `ls -1 | egrep "$patternGrepNC.*$patternGrepTail"` )

      if ( $#historyUncombinedFiles > 0 ) then

	set historyUncombinedArchive = $outputDir/history/$begindate.nc.0000.tar

        if ( ! -e $historyUncombinedArchive:h ) then
	  prepareDir $historyUncombinedArchive:h || exit 1
          setStripingMode $historyUncombinedArchive:h
          getStripingMode $historyUncombinedArchive:h | grep -F 'stripe'
        endif

	foreach file ( $historyUncombinedFiles )
	  mv $file $begindate.$file
	end

        set historyUncombinedArchiveUnique = $historyUncombinedArchive.`unique`
        ls -1 | egrep "$patternGrepNC.*$patternGrepTail" | tar -cf $historyUncombinedArchiveUnique --files-from - --remove-files
        mv -f $historyUncombinedArchiveUnique $historyUncombinedArchive
        unset historyUncombinedArchiveUnique

	if ( $?flagOutputCheckOn ) then
          compareDual $name $JOB_ID $historyUncombinedArchive
	endif

	pushd $historyUncombinedArchive:h
	set logName = $scriptName:t.$jobId.hsi.U.$begindate.log
	hsi "mkdir -p $outputPath/history; cd $outputPath/history; put $historyUncombinedArchive:t" >& $stdoutDir/$logName &
        unset logName
	popd

	if ( $?flagOutputTransferOn ) then
          pushd $stdoutDir
          set jobName = $scriptName:t.$jobId.file_sender.U.$begindate
          if ( "$project" != "" ) then
	    submitFileSender \
            -A $project \
            -N $jobName \
            -o $stdoutDir/ \
            -l walltime=$fileSenderTimeHistory \
            -v file=$historyUncombinedArchive \
            `alias fileSender`
          else
	    submitFileSender \
            -N $jobName \
            -o $stdoutDir/ \
            -l walltime=$fileSenderTimeHistory \
            -v file=$historyUncombinedArchive \
            `alias fileSender`
          endif
          unset jobName
          popd
	endif

	set combineList = ( $combineList $historyUncombinedArchive:t )

        unset historyUncombinedArchive

      endif

      if ( $?flagRunTypeProduction ) then
	if ( ( $combineFreq > 0 && $#combineList == $combineFreq ) || $currentSeg == $segmentsPerSimulation || $#restartFiles == 0 ) then
	  if ( $#combineList > 0 ) then
            set firstdate = `echo $combineList[1] | cut -c -8`
	  else
            set firstdate = $begindate
	  endif
          if ( $?flagOutputPostProcessOn ) then
	    echo "`alias frepp` -t $firstdate -d $outputDir/history -x $rtsxml $name"
          endif
	  set combineList = ( )
          unset firstdate
        endif
      endif

    endif

    # ---------------- combine, save and post-process history files: staged

    if ( $?flagOutputStagingTypeStaged ) then

      if ( $?flagOutputPostProcessOn ) then
	if ( $#combineList + 1 == $combineFreq || $currentSeg == $segmentsPerSimulation || $#restartFiles == 0 ) then
	  if ( $#combineList > 0 ) then
            set firstdate = `echo $combineList[1] | cut -c -8`
	  else
            set firstdate = $begindate
	  endif
          if ( $?ppRefineDiagScriptNamesList ) then
	    set PPcmd = "`alias frepp` -t $firstdate -D $ppRefineDiagScriptNamesList -d $outputDir/history -x $rtsxml $name"
          else
	    set PPcmd = "`alias frepp` -t $firstdate -d $outputDir/history -x $rtsxml $name"
          endif
          unset firstdate
	else
          set PPcmd = ""
	endif
      else
        set PPcmd = ""
      endif

      set tempHistoryDateDir = $outputDir/history/$begindate

      prepareDir $tempHistoryDateDir || exit 1
      setStripingMode $tempHistoryDateDir
      getStripingMode $tempHistoryDateDir | grep -F 'stripe'

      find $workDir -maxdepth 1 -type f | egrep "$patternGrepNC" | xargs -r mv -f -t $tempHistoryDateDir

      pushd $stdoutDir
      set jobName = $scriptName:t.$jobId.output_stager.$begindate
      if ( "$project" != "" ) then
        submitOutputStager \
        -A $project \
        -N $jobName \
        -o $stdoutDir/ \
        -v project=$project,datedir=$tempHistoryDateDir,check=$?flagOutputCheckOn,transfer=$?flagOutputTransferOn,frepp="'$PPcmd'",platform=$platform,stdout=$stdoutDir/ \
        `alias outputStager`
      else
        submitOutputStager \
        -N $jobName \
        -o $stdoutDir/ \
        -v datedir=$tempHistoryDateDir,check=$?flagOutputCheckOn,transfer=$?flagOutputTransferOn,frepp="'$PPcmd'",platform=$platform,stdout=$stdoutDir/ \
        `alias outputStager`
      endif
      unset jobName
      popd

      if ( "$PPcmd" == "" ) then
	set combineList = ( $combineList $tempHistoryDateDir:t.tar )
      else
	set combineList = ( )
      endif

      unset tempHistoryDateDir
      unset PPcmd

    endif

    # ---------------- terminate script if mpirun crashed

    if ( $?MPI_FAIL ) then

      unset echo
      echo "ERROR: in mpirun, core dumped: run $ireload, loop $irun"
      echo "ERROR: Any output that may have been generated is in $outputDir"

      sleep 30
      set echo
      exit 1

    endif

    # ---------------- terminate script if there are no restart files

    if ( $#restartFiles == 0 ) then
      unset echo
      echo "ERROR: no restart files exist, run $ireload, loop $irun"
      set echo
      exit 1
    endif

    # ---------------- increment the loop counter

    @ irun++

    # ---------------- write new reload information (production runs only)

    if ( $?flagRunTypeProduction ) then

      if ( $irun <= $segmentsPerJob ) then
	@ irunNext = $irun
      else
	@ ireload++
	@ irunNext = 1
      endif

      if ( -f $reload_file ) mv -f $reload_file ${reload_file}_prev
      touch $reload_file

      if ( $status ) then
	unset echo
	echo "ERROR: The reload file '$reload_file' can't be saved"
        set echo
        exit 1
      else
	unset echo
	echo "NOTE: Writing reload information to the reload file '$reload_file' at `date +%s`"
	set echo
	echo "@ ireload       =   $ireload"            >> $reload_file
	echo "@ irun          =   $irunNext"           >> $reload_file
	echo "set initCond    =   $restartArchDir.tar" >> $reload_file
	echo "set combineList = ( $combineList )"      >> $reload_file
	echo "set fyear       =   $fyear"              >> $reload_file
        chmod 644 $reload_file
      endif

    endif

    # ---------------- check if simulation complete

    if ( $?flagRunTypeProduction ) then
      @ currentSeg++
      if ( $currentSeg > $segmentsPerSimulation ) break
    endif

  end

################################################################################
#--------------------------- after the main loop -------------------------------
################################################################################

  banner ending

  # ---------------- reload and resubmit if needed (production runs only)

  if ( $?flagRunTypeProduction ) then

    if ( $ireload <= $jobsPerSimulation && $currentSeg <= $segmentsPerSimulation ) then

      if ( -f $queue_file ) then
	if ( -r $queue_file ) then
	  source $queue_file
	else
	  unset echo
	  echo "ERROR: The queue file '$queue_file' is not readable"
          set echo
	  exit 1
	endif
      endif

      if ( ! $continueFlag ) then
	unset echo
	echo "NOTE: Stopping execution"
	set echo
	exit 0
      endif

      if ( -f $scriptName ) then
        pushd $stdoutDir
        if ( "$project" != "" ) then
          submitNext -A $project -v FRE_PROJECT=$project $scriptName
        else
          submitNext $scriptName
        endif
        popd
      else
	unset echo
	echo "WARNING: The script '$scriptName' does not exist (run $ireload, loop $irun) - it can't be resubmitted"
        set echo
      endif

      if ( -f $queue_file ) mv -f $queue_file ${queue_file}_prev
      touch $queue_file

      if ( $status ) then
	unset echo
	echo "ERROR: The queue file '$queue_file' can't be saved"
        set echo
        exit 1
      else
	unset echo
	echo "NOTE: Writing queue information to the queue file '$queue_file' at `date +%s`"
	set echo
        echo "set continueFlag = $continueFlag" >> $queue_file
        echo "set project      = $project"      >> $queue_file
        echo "set queue        = $queue"        >> $queue_file
        chmod 644 $queue_file
      endif

    endif

  endif

  # ---------------- combine distributed restart files (regression runs only)

  if ( $?flagRunTypeRegression ) then

    set restartFilesUncombined = ( `tar -tf $restartArchive | egrep "($patternGrepRestartsOrNC).*$patternGrepTail"` )

    if ( $#restartFilesUncombined > 0 ) then

      set restartWorkDir = $workDir/combine_restarts
      prepareDir $restartWorkDir || exit 1

      pushd $restartWorkDir

      tar -xf $restartArchive

      set restartFiles = ( `ls -1 | egrep "($patternGrepRestartsOrNC).*$patternGrepTail" | sed -r "s/$patternGrepTail//g" | sort -u` )

      foreach file ( $restartFiles )
	set inputFiles = ( `ls -1 | egrep "$file$patternGrepTail"` )
	if ( $#inputFiles > 0 ) then
	  set compressed = `ncdump -h $inputFiles[1] | grep 'tile_index:compress' | wc -l`
	  if ( $compressed > 0 ) then
            slmnccombine $inputFiles $file && rm -f $inputFiles
            if ( $status ) then
              unset echo
              echo "ERROR: in execution of slmnccombine on restarts"
              set echo
              exit 1
            endif
	  else
            mppnccombine $file $inputFiles && rm -f $inputFiles
            if ( $status ) then
              unset echo
              echo "ERROR: in execution of mppnccombine on restarts"
              set echo
              exit 1
            endif
	  endif
	endif
      end

      set restartArchiveUnique = $restartArchive.`unique`
      ls -1 | tar -cf $restartArchiveUnique --files-from -
      mv -f $restartArchiveUnique $restartArchive
      unset restartArchiveUnique

      popd

      rm -rf $restartWorkDir
      unset restartWorkDir

    endif

    unset restartFilesUncombined

  endif

  # ---------------- normal end of script 

  rm -rf $workDir
  unset echo
  set beforewaittime = `date "+%s"`
  set ttlnowait = `echo "$beforewaittime - $beginruntime" | bc -l`
  echo "beginruntime $beginruntime beforewaittime $beforewaittime ttlnowait $ttlnowait"
  wait
  set endruntime = `date "+%s"`
  set ttlruntime = `echo "$endruntime - $beginruntime" | bc -l`
  echo "beginruntime $beginruntime endruntime $endruntime ttlruntime $ttlruntime"

  echo end_of_run
  echo "NOTE: Natural end-of-script for $scriptName."
  exit 0
