#!/bin/csh -f
#FRE scheduler-options
# 
# $Id: runscript.template.main,v 1.1.2.4 2011/01/03 18:12:38 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Runscript Template - NASA Version
# ------------------------------------------------------------------------------
# afy    Ver   1.00  Initial version (copy of the HPCS version)     January 11
# afy    Ver   2.00  Add settable constant 'moduleInitDir'          January 11
# afy    Ver   2.01  Comment out 'banner' calls                     January 11
# afy    Ver   2.02  Rename JOB_ID => PBS_JOBID                     January 11
# afy    Ver   2.03  Remove restart passage for SGE                 January 11
# afy    Ver   2.04  Remove offline/staged/bySegment combining      January 11
# afy    Ver   2.05  Modify checkpointing (no GFDL-related dirs)    January 11
# afy    Ver   2.06  Modify email preparation (no SGE variables)    January 11
# afy    Ver   3.00  Remove 'queue_commands' logic                  January 11
# afy    Ver   4.00  Prefix 'frepp' call by echo                    January 11
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2010-2011
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
# 

#===============================================================================
#FRE version-info
#===============================================================================

  echo ====== FRE RUNSCRIPT ======
  echo "Starting on `date`"
  echo "Starting on $HOST $HOSTNAME"
  set echo
  unalias *

  # ---------------- initialize environment modules

  unset echo
  #FRE const(moduleInitDir)
  source $moduleInitDir/tcsh
  set echo

  echo banner $PBS_JOBNAME

################################################################################
#---------------- global constants and variables, set by frerun ----------------
################################################################################

  #FRE const(name)
  #FRE const(rtsxml)
  #FRE const(freCommandsHomeDir)
  #FRE const(stdoutDir)
  #FRE const(workDir)
  #FRE const(archiveDir)
  #FRE const(scriptName)
  #FRE const(ppRefineDiagScriptNames)
  #FRE const(executable)
  #FRE const(getFmsData)
  #FRE const(segmentsPerSimulation)
  #FRE const(segmentsPerJob)
  #FRE const(jobsPerSimulation)
  #FRE const(combineFreq)
  #FRE const(monthslist)
  #FRE const(dayslist)
  #FRE const(timeStampFormat)
  #FRE const(baseDate)

  #FRE flag(flagRunType)
  #FRE flag(flagLogging)
  #FRE flag(flagOutputType)
  #FRE flag(flagOutputFormat)
  #FRE flag(flagOutputStagingType)
  #FRE flag(flagOutputCombineHistory)
  #FRE flag(flagOutputArchive)
  #FRE flag(flagOutputPostProcess)
  #FRE flag(flagOutputCheck)

  #FRE var(npes)
  #FRE var(ptmpDir)
  #FRE var(outputDir)
  #FRE var(gridSpec)
  #FRE var(initCond)

################################################################################
#------------------------ global environment settings --------------------------
################################################################################

  # ---------------- FRE environment variables, which have to be set after the platform csh:

  # FRE_TRANSFER_HOME	- root of the fre-transfer module
  # FRE_NCTOOLS_HOME	- toot of the fre-nctools module

  # ---------------- FRE scripts/executables, which have to be accessible via the PATH after the platform csh:

  # combine-ncc		- part of the fre-nctools module
  # compare_dual.csh	- part of the fre-commands module
  # frepp		- part of the fre-commands module
  # hsmget		- part of the fre-transfer module 
  # hsmput		- part of the fre-transfer module
  # mppnccombine	- part of the fre-nctools module
  # prepare_dir.csh	- part of the fre-commands module
  # time_stamp.csh	- part of the fre-commands module

  # ---------------- commands, copied from XML (setup/platform/csh)

  unset echo
  #FRE setup-platform-csh
  module list
  set echo

  # ---------------- exit if no fre-transfer module is loaded

  if ( ! $?FRE_TRANSFER_HOME ) then
    unset echo
    echo "ERROR: The script '$scriptName' must load a 'fre-transfer' module"
    set echo
    exit 1
  endif

  # ---------------- exit if no fre-nctools module is loaded

  if ( ! $?FRE_NCTOOLS_HOME ) then
    unset echo
    echo "ERROR: The script '$scriptName' must load a 'fre-nctools' module"
    set echo
    exit 1
  endif

  # ---------------- the settings below aren't changeable (FREROOT is for compatibility only)

  setenv FRE_COMMANDS_HOME $freCommandsHomeDir
  setenv PATH $FRE_COMMANDS_HOME/bin:$PATH
  setenv FREROOT $FRE_COMMANDS_HOME

################################################################################
#------------------------ global constants and aliases -------------------------
################################################################################

  # ---------------- for compatibility only
  set -r work = $workDir

  # ---------------- HSM site-dependent directory
  set -r hsmSiteDir = $FRE_TRANSFER_HOME/site/nasa

  # ---------------- top directory for all the HSM-copied files
  set -r hsmDir = $workDir/hsm

  # ---------------- selection patterns for grep
  set -r patternGrepTail = '\.[0-9]{4}$'
  set -r patternGrepAscii = '\<out\>|\<results\>'
  set -r patternGrepHistx = '^hi\.'
  set -r patternGrepRestarts = '\<res\>'
  set -r patternGrepRestartsOrNC = '\<res\>|\<nc\>'
  set -r patternGrepRegion = '^rregion'
  set -r patternGrepNC = '\<nc\>'

  # ---------------- FRE string date generation for file name labels
  alias timeStamp `which time_stamp.csh` -f $timeStampFormat

  # ---------------- FRE directory making/cleaning utility
  alias prepareDir `which prepare_dir.csh`

  # ---------------- FRE dual archives comparing utility
  alias compareDual `which compare_dual.csh`

  # ---------------- FRE data copying old way (deprecated)
  alias get_fms_data $getFmsData

  # ---------------- FRE postprocessing utility
  alias frepp `which frepp` -v -c split -s

  # ---------------- FRE data copying between work directory and archive directory via ptmp directory
  alias hsmget `which hsmget` -q -t -m $hsmSiteDir/hsmget.mk -w $hsmDir -p '$ptmpDir' -a /

  if ( $?flagOutputArchiveOn ) then
    alias hsmput `which hsmput` -q -t -m $hsmSiteDir/hsmput.mk -w $hsmDir -p '$ptmpDir' -a / -s cpio
  else
    alias hsmput `which hsmput` -q -t -m $hsmSiteDir/hsmput.mk -w $hsmDir -p '$ptmpDir' -a /
  endif

  # ---------------- FRE netCDF files combining utilities

  if ( $?flagOutputFormat64Bit ) then
    alias mppnccombine `which mppnccombine` -64
    alias slmnccombine `which combine-ncc`
  else if ( $?flagOutputFormatHDF5 ) then
    alias mppnccombine `which mppnccombine` -n4
    alias slmnccombine `which combine-ncc`
  else
    alias mppnccombine `which mppnccombine`
    alias slmnccombine `which combine-ncc`
  endif

  # ---------------- FRE output stager
  alias outputStager $freCommandsHomeDir/site/hpcs/fresavehist -eht

  # ---------------- batch scheduler submit command
  alias submit `which qsub`

  # ---------------- fast CXFS copy command
  alias cp `which cxfscp` -t 1 -b 8 -s 65000

################################################################################
#------------------------------ environment checks -----------------------------
################################################################################

  # ---------------- some global configuration

  limit
      
  # ---------------- exit if not running on hpcs

  set machine = `uname -m`

  if ( $machine != 'ia64' ) then
    unset echo
    echo "ERROR: The script '$scriptName' is intended for platform ia64"
    set echo
    exit 1
  endif

  unset machine

  # ---------------- exit if number of days/months/hours is not equal to number of segments per job

  if ( $#dayslist != $segmentsPerJob || $#monthslist != $segmentsPerJob) then
    unset echo
    echo "ERROR: dayslist and monthslist must be equal to a number of segments per job"
    set echo
    exit 1
  endif

  if ( $?hourslist ) then
    if ( $#hourslist != $segmentsPerJob ) then
      unset echo
      echo "ERROR: hourslist must be equal to a number of segments per job"
      set echo
      exit 1
    endif
  endif

################################################################################
#----------------------------- global variables --------------------------------
################################################################################

  if ( $?FRE_PROJECT ) then
    set project = $FRE_PROJECT
  else
    set project = ""
  endif

  set combineList = ( )

  @ ireload = 1
  @ irun = 1

################################################################################
#--------------------------- before the main loop ------------------------------
################################################################################

  # ---------------- print the script parameters

  unset echo
  echo $name
  echo ${npes}pe_${segmentsPerJob}run
  set echo

  # ---------------- commands, copied from XML (experiment/runtime/csh)

  #FRE experiment-runtime-csh

  # ---------------- initialize reloading (production runs only)

  if ( $?flagRunTypeProduction ) then

    set reload_file = $outputDir/ascii/reload_commands

    if ( -f $reload_file ) then
      if ( -r $reload_file ) then
	source $reload_file
      else
	unset echo
	echo "ERROR: reload file is not readable: $reload_file"
        set echo
	exit 1
      endif
    endif

    @ currentSeg = ( $ireload - 1 ) * $segmentsPerJob + $irun

  endif

  # ---------------- set up working directory structure

  prepareDir $workDir		|| exit 1
  prepareDir $workDir/INPUT	|| exit 1
  prepareDir $workDir/RESTART	|| exit 1

  # ---------------- input data loading

  cd $workDir

#fmsDataSets_from_xml

  if ( $status ) then
    unset echo
    echo "ERROR: get_fms_data failed"
    set echo
    exit 1
  endif

  set dataFilesNotOK = ()

#dataFiles_from_xml

  if ( $#dataFilesNotOK > 0) then
    unset echo
    foreach dataFile ( $dataFilesNotOK )
      echo "A problem with the data file: $dataFile"
    end
    echo "ERROR: Failed to copy data files"
    set echo
    exit 1
  endif

  @ gridSpecStatus = 0

  if ( ( $gridSpec:e == 'cpio' || $gridSpec:e == 'tar' ) && $gridSpec:r:e == 'nc' ) then
    hsmget $gridSpec:r:r:s+/++/\* && \
    find $hsmDir$gridSpec:r:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ gridSpecStatus = $status
  else if ( ( $gridSpec:e == 'cpio' || $gridSpec:e == 'tar' ) && $gridSpec:r:e != 'nc' ) then
    hsmget $gridSpec:r:s+/++/\* && \
    find $hsmDir$gridSpec:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ gridSpecStatus = $status
  else if ( $gridSpec:e == 'nc' ) then
    hsmget $gridSpec:s+/++ && \
    ln -f $hsmDir/$gridSpec:s+/++ $workDir/INPUT/grid_spec.nc
    @ gridSpecStatus = $status
  else if ( $gridSpec != "" && -d "$gridSpec" ) then
    hsmget $gridSpec:s+/++/\* && \
    find $hsmDir$gridSpec -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ gridSpecStatus = $status
  else if ( $gridSpec != "" && -f "$gridSpec" ) then
    hsmget $gridSpec:s+/++ && \
    ln -f $hsmDir/$gridSpec:s+/++ $workDir/INPUT/grid_spec.nc
    @ gridSpecStatus = $status
  endif

  if ( $gridSpecStatus ) then
    unset echo
    echo "ERROR: Failed to copy grid specification"
    set echo
    exit 1
  endif

  unset gridSpecStatus 

  @ initCondStatus = 0 

  if ( ( $initCond:e == 'cpio' || $initCond:e == 'tar' ) && $initCond:r:e == 'nc' ) then
    hsmget $initCond:r:r:s+/++/\* && \
    find $hsmDir$initCond:r:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ initCondStatus = $status
  else if ( ( $initCond:e == 'cpio' || $initCond:e == 'tar' ) && $initCond:r:e != 'nc' ) then
    hsmget $initCond:r:s+/++/\* && \
    find $hsmDir$initCond:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ initCondStatus = $status
  else if ( $initCond:e == 'nc' ) then
    hsmget $initCond:s+/++ && \
    ln -f $hsmDir/$initCond:s+/++ $workDir/INPUT/.
    @ initCondStatus = $status
  else if ( $initCond != "" && -d "$initCond" ) then
    hsmget $initCond:s+/++/\* && \
    find $hsmDir$initCond -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
    @ initCondStatus = $status
  else if ( $initCond != "" && -f "$initCond" ) then
    hsmget $initCond:s+/++ && \
    ln -f $hsmDir/$initCond:s+/++ $workDir/INPUT/.
    @ initCondStatus = $status
  endif

  if ( $initCondStatus ) then
    unset echo
    echo "ERROR: Failed to copy initial conditions"
    set echo
    exit 1
  endif

  unset initCondStatus

  # ---------------- the executable loading

  hsmget $executable:s+/++

  # ---------------- commands, copied from XML (experiment/input/csh[not(@type="always") and not(@type="postInit")])

  #FRE experiment-input-csh-init

  cd $workDir

  # ---------------- list files in the INPUT directory

  unset echo
  ls -l INPUT/*
  set echo

  # ---------------- normal exit if in the input data staging mode

  if ( $?FRE_STAGE ) then
    if ( $FRE_STAGE == 'INPUT' ) then
      unset echo
      echo end_of_input
      echo "NOTE: Natural end-of-input for $scriptName."
      set echo
      exit 0
    else if ( $FRE_STAGE == 'CHAIN' ) then
      if ( "$project" != "" ) then
        submit -P $project -v FRE_PROJECT=$project $scriptName
      else
        submit $scriptName
      endif
      unset echo
      echo end_of_chaining
      echo "NOTE: Natural end-of-chaining for $scriptName."
      set echo
      exit 0
    endif
  endif 

  # ---------------- executable and tables loading

  cp -p $ptmpDir$executable .

  if ( $status ) then
    unset echo
    echo "ERROR: Failed to copy the executable"
    set echo
    exit 1
  endif

#diagTable_from_xml
#fieldTable_from_xml

  touch data_table

#dataTable_from_xml
#tracerTreeTable_from_xml
#tracerTreeInit_from_xml

  # ---------------- check and prepare refine diagnostics scripts

  if ( $?flagOutputStagingTypeStaged || $?flagOutputStagingTypeBySegment ) then

    if ( $#ppRefineDiagScriptNames > 0 ) then

      set ppRefineDiagScriptNamesList = ""
      set ppRefineDiagScriptNamesNotOK = ()

      foreach ppRefineDiagScriptName ( $ppRefineDiagScriptNames )
	if ( -f $ppRefineDiagScriptName && -r $ppRefineDiagScriptName ) then
          if ( $ppRefineDiagScriptNamesList == "" ) then
            set ppRefineDiagScriptNamesList = $ppRefineDiagScriptName
          else
            set ppRefineDiagScriptNamesList = $ppRefineDiagScriptNamesList,$ppRefineDiagScriptName
          endif
	else
          set ppRefineDiagScriptNamesNotOK = ( $ppRefineDiagScriptNamesNotOK $ppRefineDiagScriptName)
	endif
      end

      if ( $#ppRefineDiagScriptNamesNotOK > 0 ) then
	unset echo
	foreach ppRefineDiagScriptName ( $ppRefineDiagScriptNamesNotOK )
          echo "A problem with the refine diagnostics script: $ppRefineDiagScriptName"
	end
	echo "ERROR: Failed to access refine diagnostics scripts"
        set echo
	exit 1
      endif

    endif

  endif

################################################################################
#------------------------------- the main loop ---------------------------------
################################################################################

  while ( $irun <= $segmentsPerJob )

    echo banner $irun/$segmentsPerJob

    # ---------------- checkpoint - if system requests exit, then resubmit and exit

    if ( -f $HOME/fre.checkpoint.$PBS_JOBID ) then

      unset echo
      echo "Exiting early, resubmitting at `date +%s`"

      set msg = "Your FRE job '$PBS_JOBID' has been checkpointed and resubmitted to the batch queue.\n"
      set msg = "${msg}It will be re-run by the system as soon as possible.\n\n"
      set msg = "${msg}Job details:\n"
      set msg = "${msg}'$name' (run $ireload, loop $irun) running on '$HOST'\n"
      echo $msg | Mail -s "job '$JOB_ID' '$name' has been checkpointed and resubmitted" $USER
      unset msg

      sleep 30
      set echo
      exit 99

    endif

    # ---------------- commands, copied from XML (experiment/input/csh[@type="always" or @type="postInit"])

    #FRE experiment-input-csh-always-or-postinit

    cd $workDir

    # ---------------- set timing parameters

    set months = $monthslist[$irun]
    set days = $dayslist[$irun]

    # ---------------- include namelists from XML

#namelists_from_xml

    # ---------------- print run parameters

    unset echo
    echo loop_$irun/$segmentsPerJob
    echo run
    set echo

    # ---------------- print a list of free and used memory of the current cpuset

    /home/fms/perform/cpusetmem/cpusetmeminfo

    # ---------------- prepare MPI call, execute it, analyze results

    if ( ! $?MPIRUN_EXEC_PREFIX ) setenv MPIRUN_EXEC_PREFIX 

#parlib_run_from_xml

    if ( $status ) then
      @ cores_dumped = 0
      foreach corefile ( `ls core*` )
        echo "dump of core file $corefile" > $corefile.out
        idb $executable:t $corefile >> $corefile.out &
        @ cores_dumped++
      end
      unset echo
      wait
      set MPI_FAIL
      set outputDir = ${outputDir}_crash
      prepareDir $outputDir/ascii || exit 1
      if ( $cores_dumped > 0 ) then
        cat core*.out >> fms.out
        cat core*.out
        echo "ERROR: in mpirun, core dumped: run $ireload, loop $irun" 
      else
        set cdsize = `limit coredumpsize`
        echo "ERROR: in mpirun, no cores produced: run $ireload, loop $irun"
        echo "NOTE: You are using $cdsize"
      endif
      set echo
    endif

    # ---------------- generate date for file names

    set begindate = `timeStamp -b`
    if ( $begindate == 'no_time_stamp' ) set begindate = tmp`date '+%j%H%M%S'`
    set enddate = `timeStamp -e`
    if ( $enddate == 'no_time_stamp' ) set enddate = tmp`date '+%j%H%M%S'`
    set fyear = `echo $enddate | cut -c -4`

    # ---------------- commands, copied from XML (experiment/postProcess/csh)

    #FRE experiment-postprocess-csh

    cd $workDir

    # ---------------- remove time_stamp.out file

    if ( -f time_stamp.out ) rm -f time_stamp.out

    # ---------------- save ascii files

    set asciiFiles = ( `ls -1 | egrep "$patternGrepAscii"` )

    if ( $#asciiFiles > 0 ) then

      set asciiArchDir = $outputDir/ascii/$begindate.ascii_out
      set asciiWorkDir = $hsmDir$asciiArchDir

      prepareDir $asciiWorkDir || exit 1 

      foreach file ( $asciiFiles )
	mv $file $asciiWorkDir/$begindate.$file
      end

      hsmput $asciiArchDir:s+/++

      if ( $status ) then
        unset echo
        echo "ERROR: Can't save the $asciiArchDir"
        set echo
        exit 1
      endif

      rm -rf $asciiWorkDir

      unset asciiWorkDir
      unset asciiArchDir

    endif

    # ---------------- save histx files

    set histxFiles = ( `ls -1 | egrep "$patternGrepHistx"` )

    if ( $#histxFiles > 0 ) then

      set histxArchDir = $outputDir/ascii/$begindate.hi
      set histxWorkDir = $hsmDir$histxArchDir

      prepareDir $histxWorkDir || exit 1 

      foreach file ( $histxFiles )
	mv $file $histxWorkDir/$file
      end

      hsmput $histxArchDir:s+/++

      if ( $status ) then
        unset echo
        echo "ERROR: Can't save the $histxArchDir"
        set echo
        exit 1
      endif

      rm -rf $histxWorkDir

      unset histxWorkDir
      unset histxArchDir

    endif

    # ---------------- save restart files, namelist, tables etc. and move them from RESTART to INPUT

    pushd $workDir/RESTART

    set restartFiles = ( `ls -1 | egrep "$patternGrepRestartsOrNC"` )

    if ( $#restartFiles > 0 ) then

      set restartArchDir = $outputDir/restart/$enddate
      set restartWorkDir = $hsmDir$restartArchDir

      prepareDir $restartWorkDir || exit 1 

      cp -p $restartFiles	$restartWorkDir
      cp -p $workDir/input.nml	$restartWorkDir
      cp -p $workDir/*_table	$restartWorkDir
      cp -p $rtsxml		$restartWorkDir
      cp -p $scriptName		$restartWorkDir

      hsmput $restartArchDir:s+/++

      if ( $status ) then
        unset echo
        echo "ERROR: Can't save the $restartArchDir"
        set echo
        exit 1
      endif

      if ( $?flagOutputCheckOn ) then
        compareDual $name $JOB_ID $restartArchDir.cpio
      endif

      if ( $?flagRunTypeProduction ) then
        rm -rf $restartWorkDir
      endif

      if ( $irun < $segmentsPerJob ) then
        find $workDir/INPUT   -maxdepth 1 -type f | egrep "$patternGrepRestarts" | xargs -r rm -f
        find $workDir/RESTART -maxdepth 1 -type f | egrep "$patternGrepRestarts" | xargs -r mv -f -t ../INPUT
        find $workDir/RESTART -maxdepth 1 -type f | egrep "$patternGrepNC"       | xargs -r mv -f -t ../INPUT
      endif

    endif

    popd

    # ---------------- combine region files

    set regionFiles = ( `ls -1 | egrep "$patternGrepRegion.*$patternGrepTail" | sed -r "s/$patternGrepTail//g" | sort -u` )

    if ( $#regionFiles > 0 ) then

      set filesNotOK = ()

      foreach file ( $regionFiles )
	set inputFiles = ( `ls -1 | egrep "$file$patternGrepTail"` )
	if ( $#inputFiles > 0 ) then
          ( mppnccombine $file $inputFiles || set filesNotOK = ( $filesNotOK $file ) ; mv -f $file `echo $file | sed "s/$patternGrepRegion//"` && rm -f $inputFiles ) &
	endif
      end
      wait

      if ( $#filesNotOK > 0) then
	unset echo
	foreach file ( $filesNotOK )
	  echo "A problem during combining the region file: $file"
	end
	echo "ERROR: Failed to combine region files"
	set echo
	exit 1
      endif

      unset filesNotOK 

    endif

    # ---------------- combine, save and post-process history files: online

    if ( $?flagOutputStagingTypeOnline ) then

      if ( $?flagOutputCombineHistoryOn ) then

	set historyFiles = ( `ls -1 | egrep "$patternGrepNC.*$patternGrepTail" | sed -r "s/$patternGrepTail//g" | sort -u` )

        if ( $#historyFiles > 0 ) then

          set filesNotOK = ()

	  foreach file ( $historyFiles )
            set inputFiles = ( `ls -1 | egrep "$file$patternGrepTail"` )
            if ( $#inputFiles > 0) then
	      ( mppnccombine $file $inputFiles || set filesNotOK = ( $filesNotOK $file ) ; test -s $file && rm -f $inputFiles ) &
            endif
	  end
	  wait

	  if ( $#filesNotOK > 0) then
	    unset echo
	    foreach file ( $filesNotOK )
	      echo "A problem during combining the history file: $file"
	    end
	    echo "ERROR: Failed to combine history files"
	    set echo
	    exit 1
	  endif

          unset filesNotOK

        endif

      endif

      set historyCombinedFiles = ( `ls -1 | egrep "$patternGrepNC"$` )

      if ( $#historyCombinedFiles > 0 ) then

	if ( $#combineList > 0 ) then
          set historyCombinedArchDir = $outputDir/history/$combineList[1]:r
        else
          set historyCombinedArchDir = $outputDir/history/$begindate.nc
        endif

        set historyCombinedWorkDir = $hsmDir$historyCombinedArchDir

	prepareDir $historyCombinedWorkDir || exit 1 

        if ( -f $historyCombinedArchDir.cpio ) then
          hsmget $historyCombinedArchDir:s+/++/\*
        endif

	foreach file ( $historyCombinedFiles )
	  mv $file $historyCombinedWorkDir/$begindate.$file
	end
      
        hsmput $historyCombinedArchDir:s+/++

	if ( $status ) then
          unset echo
          echo "ERROR: Can't save the $historyCombinedArchDir"
          set echo
          exit 1
	endif

	if ( $?flagOutputCheckOn ) then
          compareDual $name $JOB_ID $historyCombinedArchDir.cpio
	endif

	set combineList = ( $combineList $historyCombinedArchDir:t.cpio )

        rm -fr $historyCombinedWorkDir

        unset historyCombinedWorkDir
        unset historyCombinedArchDir

      endif

      set historyUncombinedFiles = ( `ls -1 | egrep "$patternGrepNC.*$patternGrepTail"` )

      if ( $#historyUncombinedFiles > 0 ) then

        set historyUncombinedArchDir = $outputDir/history/$begindate.nc.0000
        set historyUncombinedWorkDir = $hsmDir$historyUncombinedArchDir

	prepareDir $historyUncombinedWorkDir || exit 1 

	foreach file ( $historyUncombinedFiles )
	  mv $file $historyUncombinedWorkDir/$begindate.$file
	end

        hsmput $historyUncombinedArchDir:s+/++

	if ( $status ) then
          unset echo
          echo "ERROR: Can't save the $historyUncombinedArchDir"
          set echo
          exit 1
	endif

	if ( $?flagOutputCheckOn ) then
          compareDual $name $JOB_ID $historyUncombinedArchDir.cpio
	endif

        rm -fr $historyUncombinedWorkDir

        unset historyUncombinedWorkDir
        unset historyUncombinedArchDir

      endif

      if ( $?flagRunTypeProduction ) then
	if ( ( $combineFreq > 0 && $#combineList == $combineFreq ) || $currentSeg == $segmentsPerSimulation || $#restartFiles == 0 ) then
	  if ( $#combineList > 0 ) then
            set firstdate = `echo $combineList[1] | cut -c -8`
	  else
            set firstdate = $begindate
	  endif
          if ( $?flagOutputPostProcessOn ) then
	    echo frepp -t $firstdate -d $outputDir/history -x $rtsxml $name
          endif
	  set combineList = ( )
          unset firstdate
        endif
      endif

    endif

    # ---------------- terminate script if mpirun crashed

    if ( $?MPI_FAIL ) then

      unset echo
      echo "ERROR: in mpirun, core dumped: run $ireload, loop $irun" 
      echo "ERROR: Any output that may have been generated is in $outputDir" 

      if ( $?flagRunTypeProduction ) then
        if ( $ireload > 1 ) then
          set msg = "Reloaded batch job failed\n\n"
	  set msg = "${msg}Job details:\n"
	  set msg = "${msg}'$name' (run $ireload, loop $irun) running on '$HOST'\n"
          echo $msg | Mail -s "$HOST $PBS_JOBID $USER $name (run $ireload, loop $irun)" oar.gfdl.failedbatchjobs@noaa.gov
          unset msg
          unset lc
        endif
      endif

      sleep 30
      set echo
      exit 1

    endif

    # ---------------- terminate script if there are no restart files

    if ( $#restartFiles == 0 ) then
      unset echo
      echo "ERROR: no restart files exist, run $ireload, loop $irun"
      set echo
      exit 1
    endif

    # ---------------- increment the loop counter

    @ irun++

    # ---------------- write new reload information (production runs only)

    if ( $?flagRunTypeProduction ) then

      if ( ! -w $reload_file:h ) then

	unset echo
	echo "Exiting early, the archive is unavailable, resubmitting at `date +%s`"

        set msg = "Your FRE job '$PBS_JOBID' has been stopped and resubmitted to the batch queue.\n"
        set msg = "${msg}Your output directory is not writeable, which implies the archive is not available.\n"
        set msg = "${msg}Your job will be re-run by the system as soon as possible.\n\n"
	set msg = "${msg}Job details:\n"
	set msg = "${msg}'$name' (run $ireload, loop $irun) running on '$HOST'\n"
        echo $msg | Mail -s "job '$PBS_JOBID' '$name' has been stopped and resubmitted" $USER
        unset msg

	sleep 30
        set echo
	exit 99

      endif

      unset echo
      echo "Writing reload information to $reload_file at `date +%s`"
      set echo 

      if ( -f $reload_file ) then
	mv -f $reload_file ${reload_file}_prev
      endif

      if ( $irun <= $segmentsPerJob ) then
	echo "@ irun          =   $irun"		>  $reload_file
      else
	@ ireload++
	echo "@ irun          =   1"			>  $reload_file
      endif

      echo   "@ ireload       =   $ireload"		>> $reload_file
      echo   "set initCond    =   $restartArchDir.cpio"	>> $reload_file
      echo   "set combineList = ( $combineList )"	>> $reload_file
      echo   "set fyear       =   $fyear"		>> $reload_file

    endif

    # ---------------- check if simulation complete

    if ( $?flagRunTypeProduction ) then
      @ currentSeg++
      if ( $currentSeg > $segmentsPerSimulation ) break
    endif

  end

################################################################################
#--------------------------- after the main loop -------------------------------
################################################################################

  echo banner ending

  # ---------------- reload and resubmit if needed (production runs only)

  if ( $?flagRunTypeProduction ) then

    if ( $ireload <= $jobsPerSimulation && $currentSeg <= $segmentsPerSimulation ) then

      if ( -f $scriptName ) then
         if ( "$project" != "" ) then
           submit -P $project -v FRE_PROJECT=$project $scriptName
         else
           submit $scriptName
         endif
      else
	unset echo
	echo "WARNING: The script '$scriptName' does not exist (run $ireload, loop $irun) - it can't be resubmitted"
        set echo
      endif

    endif

  endif

  # ---------------- combine distributed restart files (regression runs only)

  if ( $?flagRunTypeRegression ) then

    pushd $restartWorkDir

    set restartFilesUncombined = ( `ls -1 | egrep "($patternGrepRestartsOrNC).*$patternGrepTail"` )

    if ( $#restartFilesUncombined > 0 ) then

      set restartFiles = ( `ls -1 | egrep "($patternGrepRestartsOrNC).*$patternGrepTail" | sed -r "s/$patternGrepTail//g" | sort -u` )

      foreach file ( $restartFiles )
	set inputFiles = ( `ls -1 | egrep "$file$patternGrepTail"` )
	if ( $#inputFiles > 0 ) then
	  set compressed = `ncdump -h $inputFiles[1] | grep 'tile_index:compress' | wc -l`
	  if ( $compressed > 0 ) then
            slmnccombine $inputFiles $file && rm -f $inputFiles
            if ( $status ) then
              unset echo
              echo "ERROR: in execution of slmnccombine on restarts"
              set echo
              exit 1
            endif
	  else
            mppnccombine $file $inputFiles && rm -f $inputFiles
            if ( $status ) then
              unset echo
              echo "ERROR: in execution of mppnccombine on restarts"
              set echo
              exit 1
            endif
	  endif
	endif
      end

      hsmput $restartArchDir:s+/++

      if ( $status ) then
	unset echo
	echo "ERROR: Can't save the $restartArchDir"
	set echo
	exit 1
      endif

    endif

    unset restartFilesUncombined

    popd

    rm -rf $restartWorkDir

    unset restartWorkDir
    unset restartArchDir

  endif

  # ---------------- normal end of script 

  unset echo
  echo end_of_run
  echo "NOTE: Natural end-of-script for $scriptName."
  exit 0
