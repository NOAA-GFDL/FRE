#!/usr/bin/env perl
# -*- cperl -*-

# $Id: batch.scheduler.time,v 1.1.2.1 2013/03/26 18:27:35 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Program to Show Batch Scheduler Time-Related Parameters
# ------------------------------------------------------------------------------
# afy    Ver   1.00  Initial version                                March 13
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2013
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
#

use strict;

use File::Basename();
use Getopt::Long( ':config', 'no_ignore_case', 'no_auto_abbrev' );
use XML::LibXML();

{

    package batch_scheduler_time;

    use constant VERSION => '$Id: batch.scheduler.time,v 1.1.2.1 2013/03/26 18:27:35 afy Exp $';

    use constant OPTLIST => (
        'total-time|t', 'remaining-time|r', 'retries-number|N=i', 'retry-delay|D=i',
        'help|h',       'verbose|v+',       'version|V'
    );

    use constant RETRIES_NUMBER => 60;
    use constant RETRY_DELAY    => 60;

    use constant SECONDS_PER_HOUR   => 3600;
    use constant SECONDS_PER_MINUTE => 60;

    my $self = File::Basename::basename($0);

    sub Usage()

        # ------ arguments: none
    {
        my $rtn = RETRIES_NUMBER;
        my $rtd = RETRY_DELAY;
        return (
            "\n",
            "  Usage: $self [option] ... jobId\n\n",
            "  Options:\n\n",
            "   -t         --total-time           show total (requested) walltime for the given job\n",
            "   -r         --remaining-time       show remaining walltime for the given job\n",
            "   -N NUM,    --retries-number=NUM   a number NUM of retries (default is '$rtn')\n",
            "   -D NUM,    --retry-delay=NUM      a delay NUM between retries (default is '$rtd'), in seconds\n\n",
            "   -h,        --help                 print the help message and exit\n",
            "   -v         --verbose              get verbose messages (repeat the option to increase verbosity level)\n",
            "   -V,        --version              print the tool version and exit\n\n"
        );
    }

    sub Help()

        # ------ arguments: none
    {
        my @usage = Usage();
        return ( "\n",
            "   Synopsis: The '$self' shows time-related parameters for the given job.\n", "@usage",
        );
    }

    sub Seconds($)

        # ------ arguments: $time
    {
        my $t = shift;
        if ( $t =~ m/^(\d?\d):(\d?\d):(\d?\d)$/ ) {
            return $1 * SECONDS_PER_HOUR + $2 * SECONDS_PER_MINUTE + $3;
        }
        else {
            return $t;
        }
    }

}

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////// Main //
# //////////////////////////////////////////////////////////////////////////////

{

    my %opt = (
        'total-time'     => 1,
        'retries-number' => batch_scheduler_time::RETRIES_NUMBER,
        'retry-delay'    => batch_scheduler_time::RETRY_DELAY
    );

    Getopt::Long::GetOptions( \%opt, batch_scheduler_time::OPTLIST )
        or ( print STDERR batch_scheduler_time::Usage() and exit 1 );
    if ( $opt{version} ) { print STDERR batch_scheduler_time::VERSION, "\n" and exit 0; }
    if ( $opt{help} ) { print STDERR batch_scheduler_time::Help() and exit 0; }

    if ( scalar(@ARGV) == 1 ) {
        my $jobId        = $ARGV[0];
        my $checkJobCall = "checkjob --xml $jobId";
        my $parser       = XML::LibXML->new();
        my $retry        = 0;
        while (1) {
            print STDERR "$checkJobCall\n" if $opt{verbose};
            chomp( my $res = qx($checkJobCall) );
            if ( $? == 0 ) {
                print STDERR "$res\n" if $opt{verbose} > 1;
                my $root = $parser->parse_string($res)->documentElement();
                if ( my @jobs = $root->findnodes('/Data/job') ) {
                    my $job = $jobs[0];
                    my $totalTime
                        = batch_scheduler_time::Seconds( $job->getAttribute('ReqAWDuration') );
                    if ( $opt{'remaining-time'} ) {
                        my $usedTime
                            = batch_scheduler_time::Seconds( $job->getAttribute('AWDuration') );
                        print $totalTime - $usedTime, "\n";
                        exit 0;
                    }
                    else {
                        print "$totalTime\n";
                        exit 0;
                    }
                }
                else {
                    print STDERR "Unexpected information format\n";
                    exit 1;
                }
            } ## end if ( $? == 0 )
            elsif ( $retry < $opt{'retries-number'} ) {
                print STDERR "Retrying checkjob ($retry)...\n";
                sleep $opt{'retry-delay'};
                $retry++;
            }
            else {
                print STDERR "No more checkjob retries\n";
                exit 1;
            }
        } ## end while (1)
    } ## end if ( scalar(@ARGV) == ...)
    else {
        print STDERR "The tool needs a 'jobId' argument\n";
        exit 1;
    }

}
