#!/usr/bin/env perl
# -*- cperl -*-

# $Id: batch.scheduler.fre.usage,v 1.1.2.1 2012/08/29 22:01:36 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Program to Report the FRE Usage
# ------------------------------------------------------------------------------
# afy    Ver   1.00  Copied from NCRC version (and modified)        August 12
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2012
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
#

use strict;

use File::Basename();
use File::Spec();
use Getopt::Long( ':config', 'no_ignore_case', 'no_auto_abbrev' );

{

    package batch_scheduler_fre_usage;

    use constant VERSION =>
        '$Id: batch.scheduler.fre.usage,v 1.1.2.1 2012/08/29 22:01:36 afy Exp $';

    use constant OPTLIST => ( 'help|h', 'verbose|v', 'version|V' );

    my $self = File::Basename::basename($0);

    sub Usage()

        # ------ arguments: none
    {
        return (
            "\n",
            "  Usage: $self [option]...\n\n",
            "  Options:\n\n",
            "   -h,        --help                 print the help message and exit\n",
            "   -V,        --version              print the tool version and exit\n",
            "   -v         --verbose              increase verbosity\n\n"
        );
    }

    sub Help()

        # ------ arguments: none
    {
        my @usage = Usage();
        return (
            "\n",
            "   Synopsis: The '$self' outputs a number of currently running jobs per user per FRE version\n",
            "@usage"
        );
    }

    sub Add($$$)

        # ------ arguments: $refToHash $version $user
    {
        my ( $r, $k, $v ) = @_;
        if ( exists( $r->{$k} ) ) {
            $r->{$k}->{$v}++;
        }
        else {
            $r->{$k}->{$v} = 1;
        }
    }

    sub Out($)

        # ------ arguments: $refToHash
    {
        my $r = shift;
        foreach my $version ( sort( keys( %{$r} ) ) ) {
            my @versionUsage = ();
            my %versionUsers = %{ $r->{$version} };
            foreach my $versionUser ( keys(%versionUsers) ) {
                push @versionUsage, "$versionUser($versionUsers{$versionUser})";
            }
            my $versionUsage = join( ', ', @versionUsage );
            printf "%-56s%s\n", $version, $versionUsage;
        }
    }

}

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////// Main //
# //////////////////////////////////////////////////////////////////////////////

{

    my %opt = ();

    Getopt::Long::GetOptions( \%opt, batch_scheduler_fre_usage::OPTLIST )
        or ( print STDERR batch_scheduler_fre_usage::Usage() and exit 1 );
    if ( $opt{version} ) { print STDERR batch_scheduler_fre_usage::VERSION, "\n" and exit 0; }
    if ( $opt{help} ) { print STDERR batch_scheduler_fre_usage::Help() and exit 0; }

    my $binDir      = File::Basename::dirname($0);
    my $listCommand = "$binDir/batch.scheduler.list --running";
    $listCommand .= " --verbose" if $opt{verbose};
    chomp( my $lines = qx($listCommand) );

    if ( $? == 0 ) {
        my %res = ();
        my @lines = split( /\n/, $lines );
        foreach my $line (@lines) {
            my @out = split( /,/, $line );
            my ( $gid, $id, $name, $user ) = ( $out[0], $out[1], $out[2], $out[5] );
            if ( $name ne 'STDIN' ) {
                if ($gid) {
                    if ( $gid =~ /^gfdl/ ) {
                        my $checkCommand = "checkjob $gid -v -v -v";
                        chomp( my $checkCommandOutput = qx($checkCommand) );
                        if ( $? == 0 ) {
                            my @checkCommandOutput = split( /\n/, $checkCommandOutput );
                            if ( scalar(@checkCommandOutput) > 0 ) {
                                my @freppEnvs
                                    = grep( /FRE_COMMANDS_HOME_FREPP/, @checkCommandOutput );
                                if ( scalar(@freppEnvs) > 0
                                    && $freppEnvs[0]
                                    =~ m/^\s*setenv\s+FRE_COMMANDS_HOME_FREPP\s+(\S+)$/ ) {
                                    batch_scheduler_fre_usage::Add( \%res, $1, $user );
                                }
                                else {
                                    batch_scheduler_fre_usage::Add( \%res, 'unknown', $user );
                                }
                            }
                            else {
                                print STDERR
                                    "The job '$gid' info from the Moab is empty - ignored...\n"
                                    if $opt{verbose};
                            }
                        } ## end if ( $? == 0 )
                        else {
                            print STDERR
                                "Can't get the job '$gid' info from the Moab - ignored...\n"
                                if $opt{verbose};
                        }
                    } ## end if ( $gid =~ /^gfdl/ )
                    else {
                        print STDERR "The job '$gid' has a wrong prefix - ignored...\n"
                            if $opt{verbose};
                    }
                } ## end if ($gid)
                else {
                    print STDERR
                        "The job global id is empty (it is probably starting now) - ignored...\n"
                        if $opt{verbose};
                }
            } ## end if ( $name ne 'STDIN' )
            else {
                print STDERR "The job '$id' is interactive - ignored...\n" if $opt{verbose};
            }
        } ## end foreach my $line (@lines)
        batch_scheduler_fre_usage::Out( \%res );
    } ## end if ( $? == 0 )
    else {
        print STDERR "Can't get the job list from the Moab\n";
        exit 1;
    }

}
