#!/usr/bin/perl
# -*- cperl -*-
#substitute autoRTS directories
#usage: fretransform -x xmlfile > outfile
use Getopt::Long;

use strict;

#get a datestring to use to create a unique path
my $thisdate = `date '+%Y%m%d_%H%M%S'`;
chomp $thisdate;

#get options
use constant VERSION => '$Id: fretransform,v 15.1.2.3 2010/06/18 16:28:49 arl Exp $';
use constant OPTLIST =>
  (
      'help|h',
      'datestr|d=s',
      'xmlfile|x=s',
  );
my %opt = (
     'datestr'   => $thisdate
  );
Getopt::Long::GetOptions(\%opt,OPTLIST) or die "FATAL: can't parse command line options\n";

if( ! -f $opt{xmlfile} and ! $opt{help} ) {
  print "FATAL: XML file does not exist: $opt{xmlfile}\n"; 
  $opt{help}=1;
}

#help message
if( $opt{help} ) {
   print <<EOF;
Synopsis: substitute autoRTS directories
Usage:    fretransform -d str -x xmlfile > out.xml
  [-d str] is optional and specifies a string to use in file paths
  instead of a date string.
EOF
   exit 1;
}

#create xsl to replace the directory names with "autoRTS" directories
my $gfdlhomeroot = "\$HOME/autoRTS/$opt{datestr}";
my $gfdlarchiveroot = "\$ARCHIVE/autoRTS/$opt{datestr}";
my $jaguarhomeroot = "/ccs/home/\$USER/autoRTS/$opt{datestr}";
my $jaguararchiveroot = "/tmp/work/\$USER/autoRTS/$opt{datestr}";

my $xsl = <<EOF;
<xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output method="xml" cdata-section-elements="csh"/>

   <xsl:template match="node()|@*">
     <xsl:copy>
     <xsl:apply-templates select="@*"/>
     <xsl:apply-templates/>
     </xsl:copy>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='root']">
     <xsl:choose>
     <xsl:when test="contains(../\@name,'hpcs.')">
            <directory type="root">$gfdlhomeroot</directory>
     </xsl:when>
     <xsl:when test="contains(../\@name,'doe.')">
            <directory type="root">$jaguarhomeroot</directory>
     </xsl:when>
     <xsl:otherwise>
        <xsl:copy>
        <xsl:apply-templates select="@*"/>
        <xsl:apply-templates/>
        </xsl:copy>
     </xsl:otherwise>
     </xsl:choose>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='src']">
            <directory type="src">\$(rootDir)/\$(name)/src</directory>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='scripts']">
            <directory type="scripts">\$(rootDir)/\$(name)/\$(platform)-\$(target)/scripts</directory>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='stdout']">
            <directory type="stdout">\$(rootDir)/\$(name)/\$(platform)-\$(target)/stdout</directory>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='exec']">
            <directory type="exec">\$(rootDir)/\$(name)/\$(platform)-\$(target)/exec</directory>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='archive']">
     <xsl:choose>
     <xsl:when test="contains(../\@name,'hpcs.')">
            <directory type="archive">$gfdlarchiveroot/\$(name)/\$(platform)-\$(target)</directory>
     </xsl:when>
     <xsl:when test="contains(../\@name,'doe.')">
            <directory type="archive">$jaguararchiveroot/\$(name)/\$(platform)-\$(target)</directory>
     </xsl:when>
     <xsl:otherwise>
        <xsl:copy>
        <xsl:apply-templates select="@*"/>
        <xsl:apply-templates/>
        </xsl:copy>
     </xsl:otherwise>
     </xsl:choose>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='work']">
            <directory type="work">\$TMPDIR/work/\$(name)</directory>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[\@type='ptmp']">
            <directory type="ptmp">\$TMPDIR/ptmp</directory>
   </xsl:template>

   <xsl:template match="platform[\@name]/directory[not(@*)]">
     <xsl:choose>
     <xsl:when test="contains(../\@name,'hpcs.')">
         <directory>
           <root>$gfdlhomeroot</root>
           <src>\$(rootDir)/\$(name)/src</src>
           <scripts>\$(rootDir)/\$(name)/\$(platform)-\$(target)/scripts</scripts>
           <stdout>\$(rootDir)/\$(name)/\$(platform)-\$(target)/stdout</stdout>
           <exec>\$(rootDir)/\$(name)/\$(platform)-\$(target)/exec</exec>
           <archive>$gfdlarchiveroot/\$(name)/\$(platform)-\$(target)</archive>
           <work>\$TMPDIR/work/\$(name)</work>
           <ptmp>\$TMPDIR/ptmp</ptmp>
         </directory>
     </xsl:when>
     <xsl:when test="contains(../\@name,'doe.')">
         <directory>
           <root>$jaguarhomeroot</root>
           <src>\$(rootDir)/\$(name)/src</src>
           <scripts>\$(rootDir)/\$(name)/\$(platform)-\$(target)/scripts</scripts>
           <stdout>\$(rootDir)/\$(name)/\$(platform)-\$(target)/stdout</stdout>
           <exec>\$(rootDir)/\$(name)/\$(platform)-\$(target)/exec</exec>
           <archive>$jaguararchiveroot/\$(name)/\$(platform)-\$(target)</archive>
           <work>\$TMPDIR/work/\$(name)</work>
           <ptmp>\$TMPDIR/ptmp</ptmp>
         </directory>
     </xsl:when>
     <xsl:otherwise>
        <xsl:copy>
        <xsl:apply-templates select="@*"/>
        <xsl:apply-templates/>
        </xsl:copy>
     </xsl:otherwise>
     </xsl:choose>
   </xsl:template>

</xsl:stylesheet>
EOF

#set up temporary directory, write xsl to file
my $workdir = "/tmp/fretransform_$ENV{USER}_$opt{datestr}";
if ($ENV{TMPDIR}) { $workdir = "$ENV{TMPDIR}/fretransform_$ENV{USER}_$opt{datestr}"; }
mkdir $workdir or die "FATAL: can't make temporary dir $workdir";
my $out = "$workdir/TMP-AUTORTS.xml";
my $xslfile = "$workdir/TMP-AUTORTS.xsl";
open(XSLFILE, ">$xslfile") or die "FATAL: can't open xsl file $xslfile";
print XSLFILE "$xsl\n";
close(XSLFILE);

#do the xsl transformation and call xmllint to indent the file
system("xsltproc $xslfile $opt{xmlfile} > $out");
system("xmllint --format $out");

#remove temporary stuff
unlink $out;
unlink $xslfile;
rmdir $workdir;

exit 0;



