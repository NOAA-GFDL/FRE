#!/usr/bin/env perl
# -*- cperl -*-
#
# $Id: frelist,v 18.0.2.16 2013/04/24 21:21:32 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Program to List Experiments from the XML File
# ------------------------------------------------------------------------------
# arl    Ver   0.00  Merged revision 17.0.4.10 onto trunk           March 10
# afy -------------- Branch 18.0.2 -------------------------------- March 10
# afy    Ver   1.00  Add --directory=* to request all directories   March 10
# afy    Ver   1.01  Add alias "d" for the --description option     March 10
# afy    Ver   1.02  Modify Help subroutine (list targets)          March 10
# afy    Ver   2.00  Add option --validate                          March 10
# afy    Ver   3.00  Use new FREDefaults module to return status    March 11
# afy    Ver   3.01  Use new FREMsg module (symbolic levels)        March 11
# afy    Ver   3.02  Reconfigure Getopt::Long (no 'auto_abbrev')    March 11
# afy    Ver   3.03  Rename option --quiet => --inherit             March 11
# afy    Ver   4.00  Add check for the option --directory value     April 11
# afy    Ver   4.01  Don't print non-necessary warnings             April 11
# afy    Ver   5.00  Polish the option --directory processing       April 11
# afy    Ver   5.01  Clarifications in Usage/Help messages          April 11
# afy    Ver   6.00  Use new FREExperiment module (dir)             May 11
# afy    Ver   7.00  Use new FREExperiment module (simplification)  May 11
# afy    Ver   8.00  Revive option --quiet (for compatibility)      June 11
# afy    Ver   9.00  Revive 'use lib'                               July 11
# afy    Ver   9.01  Use new module FREUtil (optionValuesListParse) July 11
# afy    Ver   9.02  Add more option values checks                  July 11
# afy    Ver  10.00  Add option --platform-csh                      October 11
# afy    Ver  10.01  Add option --remote-user                       October 11
# afy    Ver  10.02  Implement option --validate                    October 11
# afy    Ver  11.00  Use FindBin module to locate libraries         November 11
# afy    Ver  11.01  Use 'FREUtil::listUnique' to remove dupes      November 11
# afy    Ver  11.02  Use new module FREExperiment (executable)      November 11
# afy    Ver  11.03  Add option --executable                        November 11
# afy    Ver  12.00  Correct exit code (after FREExperiment->new)   December 11
# afy    Ver  12.01  Return error if no executable is found         December 11
# afy    Ver  12.02  Improve help messages                          December 11
# afy    Ver  13.00  Modify Usage (remove ASCII escapes)            April 12
# afy    Ver  14.00  Cosmetics in messages                          April 12
# afy    Ver  15.00  Add option --namelist                          June 12
# afy    Ver  15.01  Add option --regression                        June 12
# afy    Ver  15.02  Advanced options compatibility control         June 12
# afy    Ver  15.03  Add option --postfix                           June 12
# afy    Ver  15.04  Use new FREExperiment (run as key)             June 12
# afy    Ver  16.00  Fix experiment names adding                    April 13
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2013
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
#

use strict;

use Cwd();
use File::Basename();
use File::Spec();
use FindBin();
use Getopt::Long( ':config', 'no_ignore_case', 'no_auto_abbrev' );

use lib "$FindBin::Bin/../lib";

use FRE();
use FREDefaults();
use FREExperiment();
use FREMsg();
use FRETargets();
use FREUtil();
use FRETemplate();

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////// Global constants //
# //////////////////////////////////////////////////////////////////////////////

{

    package frelist;

    use constant VERSION => '$Id: frelist,v 18.0.2.16 2013/04/24 21:21:32 afy Exp $';

    use constant OPTLIST => (
        'description|D',   'diagtable',      'directory|d=s', 'evaluate|e=s',
        'executable|E',    'inherit|i!',     'namelist|N',    'nodes',
        'novalidate',      'platform-csh|S', 'postfix|P',     'regression|r=s',
        'remote-user|R=s', 'quiet|q',        'validate|C',    'curator|c',
        'Xml|X',           'help|h',         'platform|p=s',  'target|t|T=s',
        'version|V',       'verbose|v+',     'xmlfile|x=s',   'get-project'
    );

    use constant DIRECTORIES     => FREDefaults::ExperimentDirs();
    use constant INHERIT_DEFAULT => 1;

}

# //////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////////////////////////////////////// Utilities //
# //////////////////////////////////////////////////////////////////////////////

{

    package frelist;

    my $self = File::Basename::basename($0);

    sub Usage()

        # ------ arguments: none
    {
        my $cwd = Cwd::getcwd();
        my $xml = FREDefaults::XMLFile();
        my $tgt = FREDefaults::Target();
        return (
            "\n",
            "  Usage: $self [option|experiment] ...\n\n",
            "  Options:\n\n",
            "   -D,        --description               include experiment descriptions\n",
            "              --diagtable                 print the diagTables\n",
            "   -d STRING, --directory=STRING          list experiment directories with types, defined by the STRING\n",
            "   -e STRING, --evaluate=STRING           evaluate STRING expression (in XPath syntax) to retrieve experiment information\n",
            "   -E,        --executable                retrieve an executable pathname and the experiment, where this executable is defined\n",
            "   -i,        --inherit                   include inheritance information (negatable, default is on)\n",
            "   -N,        --namelist                  print all the namelists with all substitutions and overrides and exit\n",
            "              --nodes                     print number of nodes that would be requested\n",
            "   -S,        --platform-csh              print the platform csh setup (defined in the <csh> element) and exit\n",
            "   -P,        --postfix                   list all the regression runs with their labels, run numbers and postfixes\n",
            "              --get-project               print the project (defined in the <platform>/<project> element) and exit\n",
            "   -r STRING, --regression=STRING         use regression tests STRING (usable for --postfix and --namelist options only)\n",
            "   -R STRING, --remote-user=STRING        use the remote user STRING for inter-site directory listings\n",
            "   -C,        --validate                  validate (i.e. check) the FILE against the XML schema and exit\n",
            "   -c,        --curator                   check that mandatory curator tags are included in the experiment\n",
            "   -X,        --Xml                       print the experiment suite XML configuration FILE with all expansions and exit\n\n",
            "   -h,        --help                      print help message and exit\n",
            "   -p STRING, --platform=STRING           hardware and software platform STRING (required)\n",
            "   -t STRING, --target=STRING             use compilation directives, targeted by STRING (default is '$tgt')\n",
            "   -v,        --verbose                   get verbose messages (repeat the option to increase verbosity level)\n",
            "   -V,        --version                   print the tool version and exit\n",
            "   -x FILE,   --xmlfile=FILE              experiment suite XML configuration FILE (default is '$cwd/$xml')\n\n",
            "  If no experiments defined on the command line, then all the experiments in the FILE will be processed.\n",
            "  Experiments are listed in their natural order (as in the FILE).\n\n"
        );
    } ## end sub Usage

    sub Help()

        # ------ arguments: none
    {
        my @usage = frelist::Usage();
        my $dirs  = join( "', '", frelist::DIRECTORIES );
        my $tgts  = join( "', '", FRETargets::all() );
        return (
            "\n",
            "   Synopsis: $self lists experiments and other information from your XML file.\n",
            "@usage",
            "   Use --description to add the <description> element content to the list of experiments.\n",
            "      All the description texts are printed without any formatting.\n",
            "   Use --directory to request a listing of experiment directories.\n",
            "      This option value can be a single directory type or a list of them, separated by comma.\n",
            "      Possible directory types are: '$dirs'.\n",
            "      Any number of directories from this list can be requested. The keyword 'all' requests all of them.\n",
            "   Use --evaluate to retrieve various experiment information using an XPath expression, following inherits.\n",
            "      The XPath expression syntax isn't verified by the frelist, the expression is just evaluated.\n",
            "      An example: --evaluate input/dataFile[\@label=\"gridSpec\"]\n",
            "   Use --executable to request an executable pathname to be used for the given experiment.\n",
            "      This option also outputs the experiment, where this executable is predefined or should be built by default.\n",
            "      The frelist will return abnormally, if the executable pathname can't be found following inheritance.\n",
            "   Use --noinherit to request a list of experiments without inheritance information.\n",
            "      Only the experiment names will be printed (one at a line).\n",
            "   Use --platform-csh to request a platform <csh>, corresponding to the --platform option.\n",
            "      All the global and platform-level properties will be expanded.\n",
            "      This option ignores all the experiment names on the command line.\n",
            "   Use --remote-user to define a user id, which should be used in directories, listed by the --directory option.\n",
            "      This option makes sense if you run the frelist with the --platform option pointing to a remote site, where your user id might differ.\n",
            "   Use --Xml to request the complete XML file with all the expansions to be sent to the standard output.\n",
            "      This output will contain a single platform though - the one, which you have chosen using the --platform option.\n",
            "      This option ignores all the experiment names on the command line.\n",
            "   Use --namelist to request all the namelists for your experiment as a text output, ready to be read by a model.\n",
            "      If you don't use the --regression option, then you will get namelists for the production run,\n",
            "      otherwise you will get namelists for a regression test(s).\n",
            "   Use --regression to select regression namelists instead of production ones.\n",
            "      Regression namelists can be amended and/or overridden in the <runtime> portion of your XML file.\n",
            "      This option value can be a single regression test label, or a list of them, separated by comma.\n",
            "      Any number of regression tests can be requested. The keyword 'all' requests all of them,\n",
            "      The keyword 'suite' requests all available regression runs, labeled by 'basic', 'restarts' or 'scaling'.\n",
            "   Use --platform to pick a platform for experiment(s).\n",
            "      The <platform> node in the experiment suite configuration file is used\n",
            "      to set platform-specific data and instructions.\n",
            "   Use --target to define compilation and linkage directives for experiment(s).\n",
            "      Predefined targets refer to groups of directives, existing in the 'mkmf' template file.\n",
            "      Possible predefined targets are: '$tgts'.\n",
            "      Any number of targets from this list can be used here, and you can also add your own target (but not more than one).\n",
            "      Your own target should refer to a <compile> node with the corresponding value of its 'target' attribute.\n",
            "      Multiple targets are separated by comma or dash. All the directives, referred by multiple targets, are merged.\n\n"
        );
    } ## end sub Help

    sub execName($)

        # ------ arguments: $exp
    {
        my $z = shift;
        my ( $execName, $exp ) = $z->extractExecutable();
        if ($execName) {
            return ( $execName, $exp->name() );
        }
        elsif ($exp) {
            return ( $exp->executable(), $exp->name() );
        }
        else {
            return ( undef, undef );
        }
    }

    sub getRegressionPostfixes($$)

        # ------ arguments: $exp $regressionOption
    {
        my ( $z, $r ) = @_;
        my ( $expName, $fre ) = ( $z->name(), $z->fre() );
        if ( my @regLabels = $z->extractRegressionLabels($r) ) {
            my @allPostfixes = ();
            my ( $ok, $i, %allRuns ) = ( 1, 0, () );
            foreach my $regLabel (@regLabels) {
                if ( my $regInfo = $z->extractRegressionRunInfo($regLabel) ) {
                    foreach my $runNo ( sort keys %{$regInfo} ) {
                        my ( $runInfo, %run ) = ( $regInfo->{$runNo}, () );
                        my $postfix = $runInfo->{postfix};
                        push @allPostfixes, $postfix;
                        $run{label}      = $regLabel;
                        $run{number}     = $runInfo->{number};
                        $run{postfix}    = $postfix;
                        $allRuns{ $i++ } = \%run;
                    }
                }
                else {
                    $fre->out( FREMsg::FATAL,
                        "Unable to extract regression test '$regLabel' parameters from the XML file"
                    );
                    $ok = 0;
                    last;
                }
            } ## end foreach my $regLabel (@regLabels)
            if ($ok) {
                my ( $letter, %dupes ) = ( 'A', () );
                foreach my $dupe ( FREUtil::listDuplicates(@allPostfixes) ) {
                    $dupes{$dupe} = $letter++;
                }
                foreach my $runNo ( sort keys %allRuns ) {
                    my $runInfo = $allRuns{$runNo};
                    my $postfix = $runInfo->{postfix};
                    $runInfo->{dupe} = ( exists( $dupes{$postfix} ) ) ? $dupes{$postfix} : '';
                }
                return \%allRuns;
            }
            else {
                $fre->out( FREMsg::FATAL, "Not all the regression tests have been processed" );
                return undef;
            }
        } ## end if ( my @regLabels = $z...)
        else {
            $fre->out( FREMsg::FATAL, "Unable to extract regression parameters from the XML file" );
            return undef;
        }
    } ## end sub getRegressionPostfixes($$)

    sub getRegressionNamelists($$)

        # ------ arguments: $exp $regressionOption
    {
        my ( $z, $r ) = @_;
        my ( $expName, $fre ) = ( $z->name(), $z->fre() );
        if ( my @regLabels = $z->extractRegressionLabels($r) ) {
            my ( $ok, $i, %allRuns ) = ( 1, 0, () );
            foreach my $regLabel (@regLabels) {
                if ( my $regInfo = $z->extractRegressionRunInfo($regLabel) ) {
                    foreach my $runNo ( sort keys %{$regInfo} ) {
                        my ( $runInfo, %run ) = ( $regInfo->{$runNo}, () );
                        $run{label}      = $regLabel;
                        $run{number}     = $runInfo->{number};
                        $run{namelists}  = $runInfo->{namelists};
                        $allRuns{ $i++ } = \%run;
                    }
                }
                else {
                    $fre->out( FREMsg::FATAL,
                        "Unable to extract regression test '$regLabel' parameters from the XML file"
                    );
                    $ok = 0;
                    last;
                }
            }
            if ($ok) {
                return \%allRuns;
            }
            else {
                $fre->out( FREMsg::FATAL, "Not all the regression tests have been processed" );
                return undef;
            }
        } ## end if ( my @regLabels = $z...)
        else {
            $fre->out( FREMsg::FATAL, "Unable to select regression tests to process" );
            return undef;
        }
    } ## end sub getRegressionNamelists($$)

    sub skipExp($)

        # ------ arguments: $exp
    {
        my $z = shift;
        my ( $expName, $fre ) = ( $z->name(), $z->fre() );
        $fre->out( FREMsg::FATAL, "Skipping the experiment '$expName'..." );
    }

}

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////// Main //
# //////////////////////////////////////////////////////////////////////////////

{

    my %opt = (
        'inherit' => frelist::INHERIT_DEFAULT,
        'target'  => FREDefaults::Target(),
        'xmlfile' => FREDefaults::XMLFile()
    );

    Getopt::Long::GetOptions( \%opt, frelist::OPTLIST )
        or ( print frelist::Usage() and exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM );
    if ( $opt{version} ) { print frelist::VERSION, "\n" and exit FREDefaults::STATUS_OK; }
    if ( $opt{help} ) { print frelist::Help() and exit FREDefaults::STATUS_OK; }

    if ( $opt{directory} ) {
        ( $opt{directory}, my @messages )
            = FREUtil::optionValuesListParse( 'directory', $opt{directory}, frelist::DIRECTORIES );
        if ( scalar(@messages) > 0 ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL, @messages );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{evaluate} ) {
        if ( substr( $opt{evaluate}, 0, 1 ) eq '-' ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL, "The --evaluate option's value is missing" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{regression} ) {
        if ( substr( $opt{regression}, 0, 1 ) eq '-' ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL,
                "The --regression option's value is missing" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{'remote-user'} ) {
        if ( substr( $opt{'remote-user'}, 0, 1 ) eq '-' ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL,
                "The --remote-user option's value is missing" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{platform} ) {
        if ( substr( $opt{platform}, 0, 1 ) eq '-' ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL, "The --platform option's value is missing" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{target} ) {
        if ( substr( $opt{target}, 0, 1 ) eq '-' ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL, "The --target option's value is missing" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{xmlfile} ) {
        if ( substr( $opt{xmlfile}, 0, 1 ) eq '-' ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL, "The --xmlfile option's value is missing" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
        elsif ( !-e $opt{xmlfile} || !-r $opt{xmlfile} ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL,
                "The xmlfile '$opt{xmlfile}' doesn't exist or isn't readable" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{postfix} ) {
        unless ( $opt{regression} ) {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL,
                "The --postfix option requires the --regression option to be present" );
            exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
        }
    }

    if ( $opt{quiet} ) {
        FREMsg::out( $opt{verbose}, FREMsg::WARNING,
            "The --quiet option is deprecated, consider the --noinherit option instead" );
        delete $opt{inherit};
        delete $opt{quiet};
    }

    {

        my $optionInheritIsNotDefault
            = ( exists( $opt{inherit} ) and ( $opt{inherit} != frelist::INHERIT_DEFAULT ) );
        my @options = (
            'validate', 'platform-csh', 'Xml',     'directory',
            'evaluate', 'executable',   'postfix', 'namelist',
            'description', 'get-project'
        );

        for ( my $i = 0; $i < scalar(@options) - 1; $i++ ) {
            if ( $opt{ $options[$i] } ) {
                my @extraOptions   = ();
                my $extraOptionsOn = $optionInheritIsNotDefault;
                for ( my $j = $i + 1; $j < scalar(@options); $j++ ) {
                    push @extraOptions, $options[$j];
                    $extraOptionsOn ||= $opt{ $options[$j] };
                }
                if ($extraOptionsOn) {
                    my $extraOptionsAsString = '--' . join( ', --', @extraOptions ) . ', --inherit';
                    FREMsg::out( $opt{verbose}, FREMsg::WARNING,
                        "The --$options[$i] option makes other options ignored: $extraOptionsAsString"
                    );
                }
            }
        }

    }

    if ( $opt{validate} ) {
        if ( FRE::validate( { document => $opt{xmlfile}, verbose => $opt{verbose} } ) ) {
            FREMsg::out( $opt{verbose}, FREMsg::NOTE,
                "The XML file '$opt{xmlfile}' has been validated successfully" );
            exit FREDefaults::STATUS_OK;
        }
        else {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL,
                "The XML file '$opt{xmlfile}' is not valid" );
            exit FREDefaults::STATUS_XML_NOT_VALID;
        }
    }
    if ( $opt{curator} ) {
        my @expNamesRequested = FREUtil::listUnique(@ARGV);
        my $expName           = @expNamesRequested[0];
        if ($expName) {
            FRE::curator( $opt{xmlfile}, $expName, $opt{verbose} );
            exit FREDefaults::STATUS_OK;
        }
        else {
            FREMsg::out( $opt{verbose}, FREMsg::FATAL, "No experiment name specified" );
            exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
        }
    }

    my $fre = FRE->new( 'frelist', %opt ) or exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;

    if ( $opt{Xml} ) {
        print( $fre->xmlAsString(), "\n" ) and exit FREDefaults::STATUS_OK;
    }

    my @expNamesRequested = FREUtil::listUnique(@ARGV);
    my @expNames
        = ( scalar(@expNamesRequested) > 0 ) ? @expNamesRequested : $fre->experimentNames();

    # for --platform-csh option, substitute $(name) with the first experiment name if one is given
    if ( $opt{'platform-csh'} ) {
        my $csh = $fre->baseCsh;
        $csh =~ s/\$\(name\)/$expNames[0]/g if scalar @expNamesRequested > 0;
        print "$csh\n" and exit FREDefaults::STATUS_OK;
    }

    if ( $opt{'get-project'} ) {
        my $project = $fre->project();
        print "$project\n" and exit FREDefaults::STATUS_OK;
    }

    my @exps = ();
    foreach my $expName (@expNames) {
        my $exp = FREExperiment->new( $fre, $expName )
            or exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
        push @exps, $exp;
    }

    my $status = FREDefaults::STATUS_OK;

    foreach my $exp (@exps) {

        my ( $expName, $expParent ) = ( $exp->name(), $exp->parent() );
        my $expNamePrefix = ( scalar(@expNamesRequested) == 1 ) ? '' : "$expName ";

        $fre->setCurrentExperimentName($expName);

        if ( $opt{nodes} ) {

            # save verbose setting
            my $original_verbosity = $fre->{verbose};

            # quiet even FATAL messages temporarily so production/regression runs can be extracted
            # without displaying FATAL messages to screen
            $fre->{verbose} = -2;

            my $print = sub {
                my ( $mpiInfo, $label ) = @_;
                my $string = FRETemplate::schedulerSizeAsString( $fre, 'run', $mpiInfo->{coupler},
                    $mpiInfo->{npes}, $mpiInfo->{npesList}, $mpiInfo->{ntdsList}, $mpiInfo->{ntdsResList} );
                my ($nodes) = $string =~ /=(\d+)/;
                print "$expName $label would request $nodes nodes.\n";
            };

            if ( $opt{regression} ) {
                if ( my @labels = $exp->extractRegressionLabels( $opt{regression} ) ) {
                    for my $label (@labels) {
                        if ( my $regInfo = $exp->extractRegressionRunInfo( $label, $opt{ht} ) ) {
                            my $N = scalar keys %$regInfo;
                            for my $n ( sort keys %$regInfo ) {
                                my $x = $N > 1 ? sprintf( " #%s", $n + 1 ) : '';
                                $print->( $regInfo->{$n}->{mpiInfo}, "regression/$label$x" );
                            }
                        }
                        else {
                            print "$expName is not configured for regression $label run(s)\n";
                        }
                    }
                }
                else {
                    $fre->{verbose} = $original_verbosity;
                    $fre->out( FREMsg::FATAL, "Unable to select regression tests to process" );
                    exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
                }
            } ## end if ( $opt{regression} )
            else {
                if ( my $prdInfo = $exp->extractProductionRunInfo( $opt{ht} ) ) {
                    $print->( $prdInfo->{mpiInfo}, 'production' );
                }
                else {
                    print "$expName is not configured for production run\n";
                }
            }

            # restore original verbose setting
            $fre->{verbose} = $original_verbosity;
        } ## end if ( $opt{nodes} )

        if ( $opt{diagtable} ) {
            print $exp->extractTable('diagTable') . "\n";
            exit FREDefaults::STATUS_OK;
        }

        if ( $opt{directory} ) {
            my @dirList = split( ',', $opt{directory} );
            if ( scalar(@dirList) > 1 ) {
                foreach my $dir (@dirList) {
                    print $expNamePrefix, $dir, ': ', $exp->dir($dir), "\n";
                }
            }
            else {
                print $expNamePrefix, $exp->dir( $dirList[0] ), "\n";
            }
        }
        elsif ( $opt{evaluate} ) {
            print $expNamePrefix, $exp->extractValue( $opt{evaluate} ), "\n";
        }
        elsif ( $opt{executable} ) {
            my ( $execName, $expWithExecName ) = frelist::execName($exp);
            if ($execName) {
                print $expNamePrefix, $execName, ' ', $expWithExecName, "\n";
            }
            else {
                $fre->out( FREMsg::FATAL,
                    "Unable to retrieve an executable pathname for the experiment '$expName'" );
                frelist::skipExp($exp) if scalar(@exps) > 1;
                $status = FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
            }
        }
        elsif ( $opt{postfix} ) {
            if ( my $allRegInfo = frelist::getRegressionPostfixes( $exp, $opt{regression} ) ) {
                print "\n/// $expName\n";
                print
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////\n";
                print
                    "LABEL      RUN#  DUPE  POSTFIX                                                                       \n";
                print
                    "-----------------------------------------------------------------------------------------------------\n";
                foreach my $runNo ( sort keys %{$allRegInfo} ) {
                    my $runInfo = $allRegInfo->{$runNo};
                    printf(
                        "%-10s %4d %5s  %-32s\n",
                        $runInfo->{label}, $runInfo->{number},
                        $runInfo->{dupe},  $runInfo->{postfix}
                    );
                }
                print
                    "-----------------------------------------------------------------------------------------------------\n";
            }
            else {
                $fre->out( FREMsg::FATAL, "Unable to select regression tests to process" );
                frelist::skipExp($exp) if scalar(@exps) > 1;
                $status = FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
            }
        } ## end elsif ( $opt{postfix} )
        elsif ( $opt{namelist} ) {
            if ( $opt{regression} ) {
                if ( my $allRegInfo = frelist::getRegressionNamelists( $exp, $opt{regression} ) ) {
                    foreach my $runNo ( sort keys %{$allRegInfo} ) {
                        my $runInfo = $allRegInfo->{$runNo};
                        print
                            "<!-- experiment='$expName' test='$runInfo->{label}' run='$runInfo->{number}' -->\n";
                        print $runInfo->{namelists}->asXMLString();
                    }
                }
                else {
                    $fre->out( FREMsg::FATAL, "Unable to select regression tests to process" );
                    frelist::skipExp($exp) if scalar(@exps) > 1;
                    $status = FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
                }
            }
            elsif ( my $prdInfo = $exp->extractProductionRunInfo() ) {
                print "<!-- experiment='$expName' -->\n";
                print $prdInfo->{namelists}->asXMLString();
            }
            else {
                $fre->out( FREMsg::FATAL,
                    "Unable to extract production parameters from the XML file" );
                frelist::skipExp($exp) if scalar(@exps) > 1;
                $status = FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
            }
        } ## end elsif ( $opt{namelist} )
        else {
            if ( $expParent and $opt{inherit} ) {
                print $expName, ' INHERITS FROM ', $expParent->name(), "\n";
            }
            else {
                print $expName, "\n";
            }
            if ( $opt{description} ) {
                my $desc = $exp->description();
                $desc =~ m/^\s*(.*)\s*$/s;
                if ($1) {
                    print "---------------------------------------------------------------------\n";
                    print $desc, "\n\n";
                }
                else {
                    print "\n";
                }
            }
        }

        $fre->unsetCurrentExperimentName();

    } ## end foreach my $exp (@exps)

    exit $status;

}
