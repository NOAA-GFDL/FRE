#!/usr/bin/perl
# -*- cperl -*-

# $Id: frestatus,v 18.0.2.3 2012/04/11 16:06:41 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Program to Check Model Status
# ------------------------------------------------------------------------------
# vb/arl Ver   1.00  Initial version (copied from 15.1.4.1)         ???
# afy -------------- Branch 18.0.2 -------------------------------- October 11
# afy    Ver   1.00  Reconfigure Getopt::Long (no 'auto_abbrev')    October 11
# afy    Ver   1.01  Remove option --compile                        October 11
# afy    Ver   1.02  Remove option --long                           October 11
# afy    Ver   1.03  Remove option --Production                     October 11
# afy    Ver   1.04  Remove option --query                          October 11
# afy    Ver   1.05  Remove option --run                            October 11
# afy    Ver   1.06  Add option --main                              October 11
# afy    Ver   1.07  Add option --regression                        October 11
# afy    Ver   1.08  Add option --unique                            October 11
# afy    Ver   1.09  Add option --output                            October 11
# afy    Ver   1.10  Redesign the main loop and utilities           October 11
# afy    Ver   2.00  Modify modTimeStamp (fix a bug)                January 12
# afy    Ver   2.01  Cosmetics in messages                          January 12
# afy    Ver   3.00  Modify Usage (remove ASCII escapes)            April 12
# afy    Ver   3.01  Cosmetics in messages                          April 12
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2012
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
#

use strict;

use File::Basename();
use Getopt::Long(':config', 'no_ignore_case', 'no_auto_abbrev');

use FRE();
use FREDefaults();
use FREExperiment();
use FREMsg();
use FREUtil();

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////// Global constants //
# //////////////////////////////////////////////////////////////////////////////

{

  package frestatus;

  use constant VERSION => '$Id: frestatus,v 18.0.2.3 2012/04/11 16:06:41 afy Exp $';
  
  use constant OPTLIST =>
  (
    'job-number|N=i',
    'job-type|T=s',
    'main|m!',
    'output|O',
    'regression|r=s',
    'unique|u=s',
    'help|h',
    'platform|p=s',
    'target|t=s',
    'version|V',
    'verbose|v+',
    'xmlfile|x=s'
  );
  
}

# //////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////////////////////////////////////// Utilities //
# //////////////////////////////////////////////////////////////////////////////

{

  package frestatus;
  
  use Cwd();
  use File::stat;

  my $self = File::Basename::basename($0);

  sub Usage()
  # ------ arguments: none
  {
    my $cwd = Cwd::getcwd();
    my $xml = FREDefaults::XMLFile();
    my $tgt = FREDefaults::Target();
    return
    (
      "\n",
      "  Usage: $self -p|--platform platform [options] experiment [experiment2 ...]\n",
      "  Options:\n\n",
      "   -a,        --archive                   save the model output in the archive (negatable, default is on)\n",
      "   -m,        --main                      show information about the main run (negatable, default is on)\n",
      "   -O,        --output                    show the model history output status (instead of jobs completion status)\n",
      "   -r STRING, --regression=STRING         show information about the regression test STRING (instead of production run)\n",
      "   -u STRING, --unique=STRING             show information about unique runs with numbers from the STRING\n\n",
      "   -h,        --help                      print this help message and exit\n",
      "   -p STRING, --platform=STRING           hardware and software platform STRING (required)\n", 
      "   -t STRING, --target=STRING             use compilation directives, targeted by STRING (default is '$tgt')\n", 
      "   -V,        --version                   print the tool version and exit\n",
      "   -v,        --verbose                   get verbose messages (repeat the option to increase verbosity level)\n", 
      "   -x FILE,   --xmlfile=FILE              experiment suite XML configuration FILE (default is '$cwd/$xml')\n\n", 
      "  The platform and at least one experiment from the FILE must be listed as an argument.\n\n"
    );
  }

  sub Help()
  # ------ arguments: none
  {
    my @usage = frestatus::Usage();
    my $tgts = join("', '", FRETargets::all());
    my $tgst = join("', '", FRETargets::starters());
    return
    (
      "\n",
      "   Synopsis: $self shows status data about your FRE experiment(s) from your stdout or archive directories.\n",
      "@usage",
      "   Use --output to show the current status of model history output.\n",
      "      This option can show status of production or regression runs - use the option --regression to control that.\n",
      "      Also you can request information about unique runs - use the option --unique to add unique runs into the report.\n",
      "   Use --regression to request status of regression runs with the given label.\n",
      "      This option supresses all the information about production runs (including unique ones).\n", 
      "   Use --main to include the main run into the output report.\n",
      "      This option is on by default, so you can use --nomain if you don't want the main run in your report.\n",
      "   Use --unique to show status of unique runs with given numbers.\n",
      "      You can use a list of positive integer numbers, separated by comma, as a value for this option.\n",
      "      Also you can use a keyword 'all' to get information about all unique runs, which are currently available.\n",
      "   Use --platform to pick a platform for experiment(s).\n", 
      "      The <platform> node in the experiment suite configuration file is used\n", 
      "      to set platform-specific data and instructions.\n",
      "   Use --target to define compilation and linkage directives for experiment(s).\n",
      "      Predefined targets refer to groups of directives, existing in the 'mkmf' template file.\n",
      "      Possible predefined targets are: '$tgts'.\n",
      "      Any number of targets from this list can be used here, and you can also add your own target (but not more than one).\n",
      "      Targets '$tgst' are mutually exclusive - not more than one of them is allowed in the target list.\n",
      "      Your own target should refer to a <compile> node with the corresponding value of its 'target' attribute.\n", 
      "      Multiple targets are separated by comma or dash. All the directives, referred by multiple targets, are merged.\n\n" 
    );
  }
  
  sub historyDirsRunAdd($$$$)
  # ------ arguments: $exp $refToHash $key $dir
  # ------ add a directory to the hash provided that it exists and readable
  {
    my ($z, $r, $k, $d) = @_;
    if (-d $d and -r $d)
    {
      $r->{$k} = $d;
    }
    else
    {
      my ($fre, $expName) = ($z->fre(), $z->name());
      $fre->out(FREMsg::WARNING, "The experiment '$expName' - the history directory '$d' doesn't exist or not readable - ignored...");
    }
  }
  
  sub historyDirsRun($$$$$)
  # ------ arguments: $exp $refToHash $postfix $main $unique
  # ------ add directories to the hash for a single run 
  {
    my ($z, $r, $p, $m, $u) = @_;
    my ($fre, $expName, $archiveDir) = ($z->fre(), $z->name(), $z->archiveDir());
    if ($m)
    {
      if ($p)
      {
        frestatus::historyDirsRunAdd($z, $r, $p, "$archiveDir/$p/history");
      }
      else
      {
        frestatus::historyDirsRunAdd($z, $r, 'main', "$archiveDir/history");
      }
    }
    if ($u eq 'all')
    {
      my @uniqueDirs = <$archiveDir/$p*/history>;
      if (scalar(@uniqueDirs) > 0)
      {
	foreach my $uniqueDir (@uniqueDirs)
	{
	  if ($uniqueDir =~ m/^$archiveDir\/($p\d+)\/history$/)
	  {
	    frestatus::historyDirsRunAdd($z, $r, $1, $uniqueDir);
	  }
	}
      }
      else
      {
	$fre->out(FREMsg::WARNING, "The experiment '$expName' - no unique history directories are found");
      }
    }
    elsif ($u)
    {
      foreach my $n (split(',', $u))
      {
	frestatus::historyDirsRunAdd($z, $r, "$p$n", "$archiveDir/$p$n/history");
      }
    }
  }
  
  sub historyDirs($%)
  # ------ arguments: $exp %options
  # ------ return a hash of history directories according to options 
  {
    my ($z, %o) = @_;
    my ($fre, $expName, %dirs) = ($z->fre(), $z->name(), ());
    if ($o{regression})
    {
      my $r = $z->extractRegressionRunInfo($o{regression});
      if ($r)
      {
        foreach my $postfix (sort(keys(%{$r})))
	{
	  frestatus::historyDirsRun($z, \%dirs, $postfix, $o{main}, $o{unique});
	}
      }
      else
      {
	$fre->out(FREMsg::FATAL, "The experiment '$expName' - the regression test '$o{regression}' can't be processed");
      } 
    }
    else
    {
      frestatus::historyDirsRun($z, \%dirs, '', $o{main}, $o{unique});
    }
    return \%dirs;
  }
  
  sub modTimeStamp($)
  # ------ arguments: $filepath 
  {
    my $mtime = stat(shift)->mtime;
    if ($mtime)
    {
      my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime($mtime);
      return sprintf "%02d/%02d/%04d %02d:%02d:%02d", $mon + 1, $mday, $year + 1900, $hour, $min, $sec;
    }
    else
    {
      return '';
    }
  }
  
  sub printHistoryInfo($$$)
  # ------ arguments: $exp $key $dir 
  {
    my ($z, $k, $d) = @_;
    my ($fre, $expName, $desc) = ($z->fre(), $z->name(), $z->description());
    my $archExt = $fre->property('FRE.tool.archiver.extension');
    my @histFiles = <$d/????????.nc.$archExt>;
    if (scalar(@histFiles) > 0)
    {
      @histFiles = sort(map(File::Basename::basename($_), @histFiles));
      my ($frst, $last) = ($histFiles[0], $histFiles[$#histFiles]);
      my ($modelYearFrst, $modelYearLast) = (substr($frst, 0, 4), substr($last, 0, 4));
      my ($timeStampFrst, $timeStampLast) = (frestatus::modTimeStamp("$d/$frst"), frestatus::modTimeStamp("$d/$last"));
      print "$expName ($k):\n";
      print "  Years $modelYearFrst-$modelYearLast completed\n";
      print "  First archive data created: $timeStampFrst\n";
      print "  Last archive data modified: $timeStampLast\n";
      print "  Directory: $d\n";
      print "  Description: $desc\n";
    }
    else
    {
      print "$expName ($k):\n";
      print "  No history files are found\n";
      print "  Directory: $d\n";
      print "  Description: $desc\n";
    }
  }
  
  sub skipExp($)
  # ------ arguments: $exp 
  {
    my $z = shift;
    my ($expName, $fre) = ($z->name(), $z->fre());
    $fre->out(FREMsg::FATAL, "Skipping the experiment '$expName'...");
  }

}

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////// Main //
# //////////////////////////////////////////////////////////////////////////////

{

  my %opt =
  (
    'main'	=> 1,
    'target'	=> FREDefaults::Target(),
    'xmlfile'	=> FREDefaults::XMLFile()
  );

  Getopt::Long::GetOptions(\%opt, frestatus::OPTLIST) or (print frestatus::Usage() and exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM);
  if ($opt{version}) {print frestatus::VERSION,"\n" and exit FREDefaults::STATUS_OK;}
  if ($opt{help}) {print frestatus::Help() and exit FREDefaults::STATUS_OK;}
  
  unless (scalar(@ARGV) > 0)
  {
    my $self = File::Basename::basename($0);
    FREMsg::out($opt{verbose}, FREMsg::FATAL, "At least one experiment name is needed on the command line", "Try '$self --help' for more information");
    exit FREDefaults::STATUS_COMMAND_NO_EXPERIMENTS;
  }

  if ($opt{regression})
  {
    if (substr($opt{regression}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --regression option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{unique})
  {
    ($opt{unique}, my @messages) = FREUtil::optionIntegersListParse('unique', $opt{unique});
    if (scalar(@messages) > 0)
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, @messages);
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }

  if ($opt{platform})
  {
    if (substr($opt{platform}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --platform option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{target})
  {
    if (substr($opt{target}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --target option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  my $fre = FRE->new('frestatus', %opt) or exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;

  my @exps = ();
  foreach my $expName (FREUtil::listUnique(@ARGV))
  {
    my $exp = FREExperiment->new($fre, $expName) or exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
    push @exps, $exp;
  }

  my $status = FREDefaults::STATUS_OK;
  
  foreach my $exp (@exps)
  {
  
    my $expName = $exp->name(); 
    $fre->setCurrentExperimentName($expName);

    if ($opt{output})
    {
      my $ref = frestatus::historyDirs($exp, %opt);
      if (scalar(keys(%{$ref})) > 0)
      {
	foreach my $key (sort(keys(%{$ref})))
	{
	  frestatus::printHistoryInfo($exp, $key, $ref->{$key});
	}
      }
      else
      {
        $fre->out(FREMsg::FATAL, "Unable to find history directories for the experiment '$expName'");
	frestatus::skipExp($exp) if scalar(@exps) > 1;
        $status = FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
      }
    }
    else
    {
      # ------ to do
    }

    $fre->unsetCurrentExperimentName();

  }

  exit $status;

}
