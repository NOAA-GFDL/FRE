#!/usr/bin/perl
# -*- cperl -*-

# $Id: frecheck,v 18.0.4.9 2012/06/29 19:52:56 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Program to Check Model Restart Files
# ------------------------------------------------------------------------------
# arl    Ver  18.00  Merged revision 17.0.4.14 onto trunk           March 10
# afy -------------- Branch 18.0.4 -------------------------------- July 10
# afy    Ver   1.00  Use new FREDefaults module (SiteIsGFDL)        July 10
# arl    Ver   2.00  Modify endDate (return 5-digit nocalendar)     February 11
# arl    Ver   2.01  Add status return                              February 11
# arl    Ver   2.02  Call 'ardiff' without -q option                February 11
# afy    Ver   3.00  Use new FREUtils module (createDir)            February 11
# afy    Ver   4.00  Use new FREDefaults module (no SiteIsGFDL)     March 11
# afy    Ver   5.00  Reconfigure Getopt::Long ('no_auto_abbrev')    January 12
# afy    Ver   5.01  Don't do any graphics                          January 12
# afy    Ver   5.02  Remove option --timing                         January 12
# afy    Ver   5.03  Rename option --Longlist => --long-list        January 12
# afy    Ver   5.04  Rename option --Save => --save                 January 12
# afy    Ver   5.05  Rename option --Version => --version           January 12
# afy    Ver   5.06  Add option --end-date                          January 12
# afy    Ver   5.07  Add option --exclude                           January 12
# afy    Ver   5.08  Add option --ignore-attributes                 January 12
# afy    Ver   5.09  Add option --regression                        January 12
# afy    Ver   5.10  Add option --unique                            January 12
# afy    Ver   5.11  Improve startDate (return YYYYMMDD, add nml)   January 12
# afy    Ver   5.12  Redesign listing/comparing                     January 12
# afy    Ver   6.00  Fix a bug in the --version processing          January 12
# afy    Ver   7.00  Rename analyze => analyzeRegression            January 12
# afy    Ver   7.01  Modify analyzeRegression (check refToRunInfo)  January 12
# afy    Ver   7.02  Add outputFilesListing subroutine              January 12
# afy    Ver   8.00  Modify Usage (remove ASCII escapes)            April 12
# afy    Ver   8.01  Cosmetics in messages                          April 12
# afy    Ver   9.00  Use new FRENamelists module (totally new)      June 12
# afy    Ver   9.01  Use new FREExperiment module (reg*Labels)      June 12
# afy    Ver   9.02  Modify calendarType subroutine                 June 12
# afy    Ver   9.03  Modify startDate subroutine                    June 12
# afy    Ver   9.04  Modify analyzeRegression subroutine            June 12
# afy    Ver   9.05  Remove regressionLabels subroutine             June 12
# afy    Ver   9.06  Use new FREExperiment (run as key)             June 12
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2012
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
#

use strict;

use Date::Manip();
use File::Basename();
use Getopt::Long(':config', 'no_ignore_case', 'no_auto_abbrev');

use FRE();
use FREDefaults();
use FREExperiment();
use FRENamelists();
use FREUtil();

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////// Global constants //
# //////////////////////////////////////////////////////////////////////////////

{

  package frecheck;

  use constant VERSION => '$Id: frecheck,v 18.0.4.9 2012/06/29 19:52:56 afy Exp $';
  
  use constant OPTLIST =>
  (
    'end-date|e=s',
    'exclude|X=s',
    'force|f',
    'ignore-attributes|A=s',
    'long-list|L',
    'list|l',
    'regression|r=s',
    'save|S',
    'start-date|s=s',
    'unique|u=s',
    'help|h',
    'platform|p=s',
    'target|t=s',
    'verbose|v+',
    'version|V',
    'xmlfile|x=s'
  );
  
  use constant RESTART_GLOB_DEFAULT => '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]';

  use constant COMPARATOR_DEFAULT => 'ardiff -c cp';

  use constant ARCHIVER_EXTENSION_DEFAULT => 'tar';
  use constant LISTER_LONG_DEFAULT => 'ls -lU';
  use constant LISTER_SHORT_DEFAULT => 'ls -1U';

  use constant CRASH_PATTERN => qr(_crash); 

}

# //////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////////////////////////////////////// Utilities //
# //////////////////////////////////////////////////////////////////////////////

{

  package frecheck;

  use Cwd();
  
  my $self = File::Basename::basename($0);

  sub Usage()
  # ------ arguments: none
  {
    my $cwd = Cwd::getcwd();
    my $xml = FREDefaults::XMLFile();
    my $pfm = FREDefaults::Platform();
    my $tgt = FREDefaults::Target();
    return
    (
      "\n",
      "  Usage: $self [options] experiment [experiment ...]\n\n",
      "  Options:\n\n",
      "   -e STRING, --end-date=STRING           use end date STRING to directly select restart files to compare\n",
      "   -X STRING, --exclude=STRING            exclude netCDF variables, given in the list STRING, from the comparison\n",
      "   -f,        --force                     force comparing netCDF files even after differences are found\n",
      "   -A STRING, --ignore-attributes=STRING  ignore netCDF attributes, given in the list STRING, for all variables\n",
      "   -L,        --long-list                 list all the restart files in the long format (don't compare them)\n",
      "   -l,        --list                      list all the restart files in the short format (don't compare them)\n", 
      "   -r STRING, --regression=STRING         process only regression tests from the STRING (default is 'all')\n",
      "   -S,        --save                      save all the temporary files, created by the ardiff command\n",
      "   -s STRING, --start-date=STRING         use start date STRING to override the date from the configuration FILE\n",
      "   -u STRING, --unique=STRING             process additionally unique runs with numbers from the STRING (default is 'all')\n\n",
      "   -h,        --help                      print this help message and exit\n",
      "   -p STRING, --platform=STRING           hardware and software platform STRING (default is '$pfm')\n", 
      "   -t STRING, --target=STRING             use compilation directives, targeted by STRING (default is '$tgt')\n", 
      "   -V,        --version                   print the tool version and exit\n",
      "   -v,        --verbose                   get verbose messages (repeat the option to increase verbosity level)\n", 
      "   -x FILE,   --xmlfile=FILE              experiment suite XML configuration FILE (default is '$cwd/$xml')\n\n", 
      "  At least one experiment from the FILE must be listed as an argument.\n\n"
    );
  }

  sub Help()
  # ------ arguments: none
  {
    my @usage = frecheck::Usage();
    my $tgts = join("', '", FRETargets::all());
    my $tgst = join("', '", FRETargets::starters());
    return
    (
      "\n",
      "   Synopsis: $self runs the ardiff command to compare restart files on\n",
      "          the output, produced by frerun-generated runs and prints a report\n",
      "          (the ardiff command must be findable via the current user PATH).\n", 
      "@usage",
      "   Use --long-list or --list to produce a list of available restart files.\n",
      "      Options --regression and --unique limit this list to the subset, defined by these options.\n",
      "      Both the listing options suppress the comparison of restart files.\n",
      "   Use --start-date to define a new start date for the files comparison.\n",
      "      If this option is not used, then the start date will be looked for inside following namelists:\n",
      "      frecheck_nml(start_date), coupler_nml(current_date), ocean_solo_nml(date_init), standalone_rad_nml(rad_date).\n",
      "      The date in this option must be valid date string, for example - '20111111' or '11th Nov 2011'.\n",
      "   Use --end-date to override timestamps selection, based on a start date (from the XML file or the --start-date option)\n",
      "      The frecheck will directly search for restart files with this option value in their names.\n",
      "      The date in this option must be valid date string (according to same rules as the --start-date option).\n",
      "   Use --regression to compare restart files, corresponding to labels in this option value.\n", 
      "      This option value can contain a number of regression labels, separated by comma.\n",
      "      The reserved value 'all' (which is default) will select all available regression labels.\n",
      "   Use --unique to compare restart files, corresponding to unique runs with numbers from this option value.\n",
      "      This option value can contain a list of numbers, separated by comma; ranges are also supported.\n",
      "      The reserved value 'all' (which is default) will select all available unique runs.\n",
      "   Use --platform to pick a platform for experiment(s).\n", 
      "      The <platform> node in the experiment suite configuration file is used\n", 
      "      to set platform-specific data and instructions.\n",
      "   Use --target to define compilation and linkage directives for experiment(s).\n",
      "      Predefined targets refer to groups of directives, existing in the 'mkmf' template file.\n",
      "      Possible predefined targets are: '$tgts'.\n",
      "      Any number of targets from this list can be used here, and you can also add your own target (but not more than one).\n",
      "      Targets '$tgst' are mutually exclusive - not more than one of them is allowed in the target list.\n",
      "      Your own target should refer to a <compile> node with the corresponding value of its 'target' attribute.\n", 
      "      Multiple targets are separated by comma or dash. All the directives, referred by multiple targets, are merged.\n\n" 
    );
  }

  sub comparator($$)
  # ------ arguments: $fre $refToOptions
  {
    my ($fre, $r) = @_;
    my $comp = $fre->property('FRE.tool.comparator.default') || frecheck::COMPARATOR_DEFAULT;
    $comp .= " -A $r->{'ignore-attributes'}" if $r->{'ignore-attributes'};
    $comp .= " -x $r->{exclude}" if $r->{exclude};
    $comp .= ' -q' unless $r->{verbose};
    $comp .= ' -s' if $r->{save};
    $comp .= ' -f' if $r->{force};
    return $comp;
  }
  
  sub infoHashTranspose($)
  # ------ arguments: $refToInfoHash
  {
    my $r = shift;
    my %result = ();
    foreach my $dir (keys(%{$r}))
    {
      my $refToTimestamps = $r->{$dir};
      foreach my $timestamp (@{$refToTimestamps})
      {
        if (exists($result{$timestamp}))
	{
	  push @{$result{$timestamp}}, $dir if scalar(grep($_ eq $dir, @{$result{$timestamp}})) == 0;
	}
	else
	{
	  $result{$timestamp} = [$dir];
	}
      }
    }
    return \%result;
  }
  
  sub calendarType($)
  # ------ arguments: $namelistsHandle
  {
    my $h = shift;
    my $result = 'no_calendar';
    foreach my $name ('coupler_nml', 'main_nml', 'ocean_solo_nml', 'standalone_rad_nml')
    {
      if (my $value = $h->namelistDoubleQuotedStringGet($name, 'calendar') || $h->namelistSingleQuotedStringGet($name, 'calendar'))
      {
        $result = $value;
	last;
      }
    }
    return $result;
  }
  
  sub endDate($$$)
  # ------ arguments: $startDate $lengthInDays $calendarType
  {
    my ($s, $d, $c) = @_;
    if ($c ne 'no_calendar')
    {
      return FREUtil::graindate(FREUtil::modifydate($s, "+ $d days"), 'day');
    }
    else
    {
      return sprintf("%05d", $d);
    }
  }
  
  sub startDate($)
  # ------ arguments: $namelistsHandle
  {
    my $h = shift;
    my $result = '0,1,1,0,0,0';
    foreach my $ref (['frecheck_nml', 'start_date'], ['coupler_nml', 'current_date'], ['ocean_solo_nml', 'date_init'], ['standalone_rad_nml', 'rad_date'])
    {
      my ($name, $variable) = @{$ref};
      if (my $value = $h->namelistDateGet($name, $variable))
      {
        $result = $value;
	last;
      }
    }
    return FREUtil::parseFortranDate($result);
  }
  
  sub allPossibleTimestamps($$$)
  # ------ arguments: $refToRunInfo $startDate $calendarType
  {
    my ($r, $s, $c) = @_;
    my ($len, @timestamps) = (0, ());
    foreach my $day (split(/ /, $r->{days}))
    {
      $len += $day;
      push @timestamps, frecheck::endDate($s, $len, $c);
    }
    return @timestamps;
  }
  
  sub analyzeRegression($$$$)
  # ------ arguments: $exp $refToLabels $startDate $unique
  {
    my ($z, $l, $s, $u) = @_;
    my ($fre, $archiveDir, $ok, %result) = ($z->fre(), $z->archiveDir(), 1, ());
    foreach my $label (@{$l})
    {
      if (my $regInfo = $z->extractRegressionRunInfo($label))
      {
	foreach my $runNo (sort(keys(%{$regInfo})))
	{
	  my $runInfo = $regInfo->{$runNo};
	  my ($postfix, $nmls) = ($runInfo->{postfix}, $runInfo->{namelists});
	  my ($startDate, $calendarType) = ($s || frecheck::startDate($nmls), frecheck::calendarType($nmls));
          my @timestamps = frecheck::allPossibleTimestamps($runInfo, $startDate, $calendarType);
          my $dir = "$archiveDir/$postfix/restart";
	  if (-d $dir && -r $dir)
	  {
	    $result{$dir} = \@timestamps;
	  }
	  else
	  {
	    $fre->out(FREMsg::WARNING, "The restart directory '$dir' doesn't exist or not readable");
	  }
	  if ($u eq 'all')
	  {
	    my $crashPattern = frecheck::CRASH_PATTERN;
	    foreach my $uniqueDir (glob("$archiveDir/${postfix}[0-9]*/restart"))
	    {
	      if ($uniqueDir !~ m/$crashPattern/o)
	      {
		if (-d $uniqueDir && -r $uniqueDir)
		{
	          $result{$uniqueDir} = \@timestamps;
		}
		else
		{
	          $fre->out(FREMsg::WARNING, "The restart directory '$uniqueDir' doesn't exist or not readable");
		}
	      }
	    }
	  }
	  else
	  {
	    foreach my $n (split(',', $u))
	    {
	      my $uniqueDir = "$archiveDir/$postfix$n/restart";
	      if (-d $uniqueDir && -r $uniqueDir)
	      {
		$result{$uniqueDir} = \@timestamps;
	      }
	      else
	      {
		$fre->out(FREMsg::WARNING, "The restart directory '$uniqueDir' doesn't exist or not readable");
	      }
	    }
	  }
	}
      }
      else
      {
        $ok = 0;
      }
    }
    return ($ok) ? \%result : undef;
  }
  
  sub outputFilesListing($$$)
  # ------ arguments: $refToInfo $archExt $lister 
  {
    my ($r, $a, $l) = @_;
    my $fileGlob = frecheck::RESTART_GLOB_DEFAULT;
    my $files = join(' ', map("$_/$fileGlob.$a", sort(keys(%{$r}))));
    print qx($l $files);
  }
  
  sub referenceInfo($$)
  # ------ arguments: $exp $archExt
  {
    my ($z, $a) = @_;
    my ($fre, @compFiles) = ($z->fre(), $z->extractReferenceFiles());
    my %result = ();
    foreach my $compFile (@compFiles)
    {
      if (-f $compFile && -r $compFile)
      {
	my $fileGlob = frecheck::RESTART_GLOB_DEFAULT;
	if ($compFile =~ m/\/($fileGlob)\.$a$/)
	{
	  my $timestamp = $1;
	  if (exists($result{$timestamp}))
	  {
	    push @{$result{$timestamp}}, $compFile if scalar(grep($_ eq $compFile, @{$result{$timestamp}})) == 0;
	  }
	  else
	  {
	    $result{$timestamp} = [$compFile];
	  }
	}
	else
	{
	  $fre->out(FREMsg::WARNING, "The reference file '$compFile' is invalid - unable to extract a timestamp from its name");
	}
      }
      else
      {
	$fre->out(FREMsg::WARNING, "The reference file '$compFile' doesn't exist or not readable");
      }
    }
    return \%result;
  }
  
  sub compare($$$$$$)
  # ------ arguments: $exp $comparator $archExt $refToInfoHash $endDate $verbose
  {
    my ($z, $c, $a, $r, $e, $v) = @_;
    my ($fre, $archiveDir) = ($z->fre(), $z->archiveDir());
    my ($crsTested, $crsPassed, $refTested, $refPassed) = (0, 0, 0, 0);
    my ($crsInfo, $refInfo) = (frecheck::infoHashTranspose($r), frecheck::referenceInfo($z, $a));
    my @crsTimestamps = ($e) ? ($e) : sort(keys(%{$crsInfo}));
    my @refTimestamps = sort(keys(%{$refInfo}));
    foreach my $timestamp (@crsTimestamps)
    {
      my @crsDirs = sort(@{$crsInfo->{$timestamp}});
      my @crsFiles = glob(join(' ', map("$_/$timestamp.$a", @crsDirs)));
      if (scalar(@crsFiles) > 0)
      {
	if (scalar(@crsFiles) > 1)
	{
	  if ($v)
	  { 
            print "--------------------------------------------------------------------------------\n";
            print "Crossover comparing files with timestamp '$timestamp':\n";
            print "--------------------------------------------------------------------------------\n";
            print join("\n", @crsFiles), "\n"; 
            print "--------------------------------------------------------------------------------\n";
          }
          my $files = join(' ', @crsFiles);
          my $res = system("ls -1f $files | $c");
	  $crsPassed++ unless $res;
	  $crsTested++;
	}
	else
	{
          $fre->out(FREMsg::WARNING, "Not enough files in '$archiveDir' with timestamp '$timestamp' for crossover comparing");
	}
	if (scalar(grep($_ eq $timestamp, @refTimestamps)) > 0)
	{
          my @refFiles = ($crsFiles[0]);
	  push @refFiles, glob(join(' ', @{$refInfo->{$timestamp}}));
	  if (scalar(@refFiles) > 1)
	  {
	    if ($v)
	    { 
              print "--------------------------------------------------------------------------------\n";
              print "Referential comparing files with timestamp '$timestamp':\n";
              print "--------------------------------------------------------------------------------\n";
              print join("\n", @refFiles), "\n"; 
              print "--------------------------------------------------------------------------------\n";
            }
            my $files = join(' ', @refFiles);
            my $res = system("ls -1f $files | $c");
	    $refPassed++ unless $res;
	    $refTested++;
	  }
	  else
	  {
            $fre->out(FREMsg::WARNING, "Not enough files in '$archiveDir' with timestamp '$timestamp' for referential comparing");
	  }
	}
      }
      else
      {
        $fre->out(FREMsg::WARNING, "No files in '$archiveDir' with timestamp '$timestamp' for any comparing");
      }
    }
    return ($crsTested, $crsPassed, $refTested, $refPassed);
  }
  
  sub skipExp($)
  # ------ arguments: $exp 
  {
    my $z = shift;
    my ($expName, $fre) = ($z->name(), $z->fre());
    $fre->out(FREMsg::FATAL, "Skipping the experiment '$expName'...");
  }

}

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////// Main //
# //////////////////////////////////////////////////////////////////////////////

{

  my %opt =
  (
    'regression'	=> 'all',
    'unique'		=> 'all',
    'platform'		=> FREDefaults::Platform(),
    'target'		=> FREDefaults::Target(),
    'xmlfile'		=> FREDefaults::XMLFile()
  );

  Getopt::Long::GetOptions(\%opt, frecheck::OPTLIST) or (print frecheck::Usage() and exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM);
  if ($opt{version}) {print frecheck::VERSION,"\n" and exit FREDefaults::STATUS_OK;}
  if ($opt{help}) {print frecheck::Help() and exit FREDefaults::STATUS_OK;}

  unless (scalar(@ARGV) > 0)
  {
    my $self = File::Basename::basename($0);
    FREMsg::out($opt{verbose}, 0, "At least one experiment name is needed on the command line", "Try '$self --help' for more information");
    exit FREDefaults::STATUS_COMMAND_NO_EXPERIMENTS;
  }

  if ($opt{'start-date'})
  {
    if (substr($opt{'start-date'}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --start-date option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
    elsif (Date::Manip::ParseDate($opt{'start-date'}))
    {
      $opt{'start-date'} = Date::Manip::UnixDate($opt{'start-date'}, '%Y%m%d');
      FREMsg::out($opt{verbose}, FREMsg::NOTE, "Using the --start-date option value '$opt{'start-date'}'");
    }
    else
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --start-date option value '$opt{'start-date'}' has wrong format or wrong value");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{'end-date'})
  {
    if (substr($opt{'end-date'}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --end-date option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
    elsif (Date::Manip::ParseDate($opt{'end-date'}))
    {
      $opt{'end-date'} = Date::Manip::UnixDate($opt{'end-date'}, '%Y%m%d');
      FREMsg::out($opt{verbose}, FREMsg::NOTE, "Using the --end-date option value '$opt{'end-date'}'");
    }
    else
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --end-date option value '$opt{'end-date'}' has wrong format or wrong value");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{unique})
  {
    ($opt{unique}, my @messages) = FREUtil::optionIntegersListParse('unique', $opt{unique});
    if (scalar(@messages) > 0)
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, @messages);
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }

  if ($opt{regression})
  {
    if (substr($opt{regression}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --regression option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{platform})
  {
    if (substr($opt{platform}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --platform option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{target})
  {
    if (substr($opt{target}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --target option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  if ($opt{xmlfile})
  {
    if (substr($opt{xmlfile}, 0, 1) eq '-')
    {
      FREMsg::out($opt{verbose}, FREMsg::FATAL, "The --xmlfile option's value is missing");
      exit FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
  }
  
  my $fre = FRE->new('frecheck', %opt) or exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
  
  my @exps = ();
  foreach my $expName (FREUtil::listUnique(@ARGV))
  {
    my $exp = FREExperiment->new($fre, $expName) or exit FREDefaults::STATUS_FRE_GENERIC_PROBLEM;
    push @exps, $exp;
  }

  my $comparator = frecheck::comparator($fre, \%opt);
  
  my $archExt = $fre->property('FRE.tool.archiver.extension') || frecheck::ARCHIVER_EXTENSION_DEFAULT;

  my (%crsResult, %refResult) = ((), ());
  my ($reportOn, $status) = (0, FREDefaults::STATUS_OK);

  foreach my $exp (@exps)
  {

    my $expName = $exp->name();
    $fre->setCurrentExperimentName($expName);
    
    if (my @labels = $exp->extractRegressionLabels($opt{regression}))
    {
      if (my $info = frecheck::analyzeRegression($exp, \@labels, $opt{'start-date'}, $opt{unique}))
      {
        if (scalar(keys(%{$info})) > 0)
        {
	  if ($opt{'long-list'})
	  {
	    frecheck::outputFilesListing($info, $archExt, $fre->property('FRE.tool.lister.long') || frecheck::LISTER_LONG_DEFAULT);
	  }
	  elsif ($opt{list})
	  {
	    frecheck::outputFilesListing($info, $archExt, $fre->property('FRE.tool.lister.short') || frecheck::LISTER_SHORT_DEFAULT);
	  }
	  else
	  {
	    my ($crsTested, $crsPassed, $refTested, $refPassed) = frecheck::compare($exp, $comparator, $archExt, $info, $opt{'end-date'}, $opt{verbose});
	    $crsResult{$expName} = ($crsTested > 0) ? (($crsTested == $crsPassed) ? 1 : -1) : 0;
	    $refResult{$expName} = ($refTested > 0) ? (($refTested == $refPassed) ? 1 : -1) : 0;
	    $status = FREDefaults::STATUS_DATA_NOT_EXISTS if $crsResult{$expName} == 0 && $refResult{$expName} == 0;
	    $status = FREDefaults::STATUS_DATA_NO_MATCH if $crsResult{$expName} < 0 || $refResult{$expName} < 0;
	    $reportOn = 1;
	  }
	}
	else
	{
	  $fre->out(FREMsg::FATAL, "Unable to select regression restart directories to process");
          frecheck::skipExp($exp) if scalar(@exps) > 1;
          $status = FREDefaults::STATUS_FS_GENERIC_PROBLEM;
	}
      }
      else
      {
	$fre->out(FREMsg::FATAL, "Unable to extract regression parameters from the XML file");
        frecheck::skipExp($exp) if scalar(@exps) > 1;
        $status = FREDefaults::STATUS_FS_GENERIC_PROBLEM;
      }
    }
    else
    {
      $fre->out(FREMsg::FATAL, "Unable to select regression tests to process");
      frecheck::skipExp($exp) if scalar(@exps) > 1;
      $status = FREDefaults::STATUS_COMMAND_GENERIC_PROBLEM;
    }
    
    $fre->unsetCurrentExperimentName();

  }

  if ($reportOn)
  {
    print "\n";
    print '    CROSSOVER   PASSED: ', join(' ', grep($crsResult{$_} >  0, keys %crsResult)), "\n";
    print '    CROSSOVER   FAILED: ', join(' ', grep($crsResult{$_} <  0, keys %crsResult)), "\n";
    print '    CROSSOVER UNTESTED: ', join(' ', grep($crsResult{$_} == 0, keys %crsResult)), "\n";
    print 'REFERENTIALLY   PASSED: ', join(' ', grep($refResult{$_} >  0, keys %refResult)), "\n";
    print 'REFERENTIALLY   FAILED: ', join(' ', grep($refResult{$_} <  0, keys %refResult)), "\n";
    print 'REFERENTIALLY UNTESTED: ', join(' ', grep($refResult{$_} == 0, keys %refResult)), "\n";
    print "\n";
  }
  
  exit $status;

}
