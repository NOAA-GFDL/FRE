#!/bin/csh -f
#
# TEST FOR REPRODUCIBILITY BY DIFFING RESTART FILES.
#    See help message below.
#                                                        (arl, 10/2001)
 
#HOW TO PROCESS INPUT IN CSH, AS WITH "<"
#while ( 1 )
#  set line = "$<"
#  if ( "$line" == "" ) break
#  echo "$line"
#end

#source $MODULESHOME/init/csh
#if ( -d /home/pem/local/modulefiles ) module use -a /home/pem/local/modulefiles
#if ( -d /ncrc/home1/Tara.McQueen/local/modulefiles ) module use -a /ncrc/home1/Tara.McQueen/local/modulefiles
#module load gcp

set extraoptions = ""
set copytool = "gcp"
set argv = (`getopt qshfgx:v:A:c: $*`)
while ("$argv[1]" != "--")
    switch ($argv[1])
        case -q:
            set quiet; breaksw
        case -s:
            set do_not_delete; breaksw
        case -h:
            set help; breaksw
        case -f:
            set extraoptions = "-f $extraoptions"; set diffall; breaksw
        case -g:
            set extraoptions = "-g $extraoptions"; breaksw
        case -x:
            set extraoptions = "-x $argv[2] $extraoptions"; shift argv; breaksw
        case -v:
            set extraoptions = "-v $argv[2] $extraoptions"; shift argv; breaksw
	case -A:
	    set extraoptions = "-A $argv[2] $extraoptions"; shift argv; breaksw
        case -c:
            set copytool = "$argv[2]"; shift argv; breaksw
    endsw
    shift argv
end
shift argv
#if ( $?DEBUG ) echo extraoptions is $extraoptions

if ( $?help ) then
HELP:
cat << EOF

Name:     ardiff

Synopsis: ardiff is a utility for diffing cpio or tar archives containing
          netcdf files and text files.

          It takes a list of *cpio or *tar files as input. It extracts them
          into a temporary folder and compares the files in the first
          archive to the corresponding files in the second archive.
          It then compares the first archive to the third, etc.

Usage:    ls -1 */history/00010101.nc.cpio | ardiff

          -s           save temporary directory containing the restart
                       files extracted from the archives.
          -c copytool  set the tool used to copy files (default: gcp)
          -q           quiet: do not print cpio warnings
          -h           help: print this help message

          ardiff compares first with cmp, and if that fails, it uses
          the nccmp utility written by Remik Ziemlinski.

          By default, ardiff calls nccmp with the options -mdq (compare
          metadata, data, and quiet).  You can add these options:

          -f   Forcefully compare, do not stop after first difference
          -g   Compare global attributes  
          -v   Compare variable(s) var1[,...] only
          -x   Exclude variable(s) var1[,...]
          -A   Ignore attribute(s) att1[,...] for all variables

          You may want more control over the order of the files since
          the first archive file will be compared to all the rest:
 
          ls -1 */history/00010101.nc.cpio > input
          ardiff < input

EOF
exit 1
endif

unalias *

set site = ''
if ( "Scopytool" == "gcp" ) then
   set site = `perl -T -e "use Net::Domain(hostdomain); print hostdomain" | cut -f1 -d'.'`
   if ( "$site" == "princeton" ) set site = "gfdl"
   set site = "$site:"
endif

set top = $cwd
set mystat = 0

#create list of filenames
set files = ()
while ( 1 )
   set stdinf = "$<"
   if ( "$stdinf" == "" ) then 
      break 
   endif 
   set files = ( $files $stdinf )
end

#get first cpio filename  
set file1 = $files[1]
shift files
if ( "$file1" == "" ) goto HELP
if ( ! -e $file1 ) echo WARNING: $file1 does not exist on local filesystems
set firstchar = `echo $file1 | cut -c1`
if ( "$firstchar" != "/" ) set file1 = "$top/$file1"

#set up temporary directory
unsetenv ARDIFFTMP
test $?FRE_SYSTEM_TMP -eq 1 && setenv ARDIFFTMP $FRE_SYSTEM_TMP
test $?ARDIFFTMP -eq 0 && test $?TMPDIR -eq 1 && setenv ARDIFFTMP $TMPDIR
test $?ARDIFFTMP -eq 0 && setenv ARDIFFTMP /tmp

set TMP = `mktemp -d --tmpdir=$ARDIFFTMP ardiff.$HOST.$$.XXXXXXXXXX`

cd $TMP
mkdir first second firstf secondf

#extract first cpio file
cd first 
set type = $file1:e

if ( "$type" == "cpio" || "$type" == "tar" ) then

   if ( ! $?quiet ) echo $copytool ${site}$file1 $TMP/firstf/
   $copytool ${site}$file1 $TMP/firstf/
   if ( $status ) then
     echo ERROR: unable to copy file $file1
     exit 1
   endif
   set local1 = ${TMP}/firstf/$file1:t

   if ( "$type" == "cpio" ) then
      if ( $?quiet ) then
         cpio -i < $local1 >& /dev/null
         set thisstatus = $status
      else
         cpio -i < $local1
         set thisstatus = $status
      endif
      if ( $thisstatus ) echo "WARNING: cpio returned error status for $file1"
   else if ( "$type" == "tar" ) then
      if ( $?quiet ) then
         tar -xf $local1
         set thisstatus = $status
      else
         tar -xvf $local1
         set thisstatus = $status
      endif
      if ( $thisstatus ) then
         echo "WARNING: tar returned error status for $file1"
      endif
   else
      echo ERROR: only tar or cpio supported
   endif
else 

   #we move everything to TMP/first
   if ( ! $?quiet ) echo $copytool $file1/\* $TMP/first/
   $copytool $file1/* $TMP/first/
   if ( $status ) then
     echo ERROR: unable to copy files from directory $file1
     exit 1
   endif

endif

set list = ( `ls -1 *` )
cd ../second

#loop over remaining cpio files, do diffs
while ( 1 )
  if ( "$files" == '' ) then
    if ( $?DID_SOMETHING ) then
      break
    else
      cd ../..
      if ( $?do_not_delete ) then
         echo Files left in $TMP
      else
         rm -rf $TMP >& /dev/null
      endif
      echo ERROR: Not enough files to check.
      goto HELP
    endif
  endif
  set file2 = $files[1]
  shift files
  set file2 = `echo $file2`
  set firstchar = `echo $file2 | cut -c1`
  if ( "$firstchar" != "/" ) set file2 = "$top/$file2"
  rm -rf ${TMP}/secondf/* >& /dev/null
  set type = $file2:e


  if ( "$type" == "cpio" || "$type" == "tar" ) then

     if ( ! $?quiet ) echo $copytool ${site}$file2 $TMP/secondf/
     $copytool ${site}$file2 $TMP/secondf/
     if ( $status ) then
       echo ERROR: unable to copy file $file2
       exit 1
     endif
     set local2 = ${TMP}/secondf/$file2:t

     rm -rf * >& /dev/null
     if ( "$type" == "cpio" ) then
        if ( $?quiet ) then
           cpio -i < $local2 >& /dev/null
           set thisstatus = $status
        else
           cpio -i < $local2
           set thisstatus = $status
        endif
        if ( $thisstatus ) echo "WARNING: cpio returned error status for $file2"
     else if ( "$type" == "tar" ) then
        if ( $?quiet ) then
           tar -xf $local2
           set thisstatus = $status
        else
           tar -xvf $local2
           set thisstatus = $status
        endif
        if ( $thisstatus ) then
           echo "WARNING: tar returned error status for $file2"
        endif
      else
        echo ERROR: only tar or cpio supported
      endif

  else

     if ( ! $?quiet ) echo $copytool $file2/\* $TMP/second/
     $copytool $file2/* $TMP/second/
     if ( $status ) then
       echo ERROR: unable to copy files from directory $file2
       exit 1
     endif

  endif

  echo "/// $file1"
  echo '\\\' $file2

  foreach ncfile ( $list ) 
    if ( ! $?quiet ) echo "      Comparing $ncfile..."
    cmp ../first/$ncfile ../second/$ncfile >& /dev/null
    set cmpstatus = $status
    if ( $cmpstatus == 2 ) then
       if ( "$ncfile:e" == 'nc' || "$ncfile:e" == 'res' ) then
          echo "DIFFER : FILE NOT FOUND : $ncfile"
          set mystat = 1
        else
          echo "WARNING : NONESSENTIAL FILE NOT FOUND : $ncfile"
        endif
    else if ( $cmpstatus != 0 ) then
       if ( "$ncfile:e" == 'nc' ) then
          if ( $?quiet ) then
             nccmp -dmq $extraoptions -w format ../first/$ncfile ../second/$ncfile >& /dev/null
             if ( $status != 0 ) then
                set mystat = 1
                echo "DIFFER : $ncfile"
             endif
          else 
             nccmp -dmq $extraoptions -w format ../first/$ncfile ../second/$ncfile
             if ( $status == 0 ) then
                echo "nccmp shows the $ncfile files are equivalent"
             else 
                set mystat = 1
             endif
          endif
       else if ( "$ncfile:e" == 'res' ) then
          echo "DIFFER : $ncfile"
          set mystat = 1
       else 
          set ftype = `file ../first/$ncfile | grep text`
          if ( "$ftype" != '' && $?diffall ) then
             echo "WARNING : NONESSENTIAL ASCII FILES DIFFER : $ncfile"
             diff ../first/$ncfile ../second/$ncfile | head
          else
             echo "WARNING : NONESSENTIAL FILES DIFFER : $ncfile"
          endif
          #set mystat = 1
       endif
    endif
  end
  set DID_SOMETHING

end

cd ../..
if ( $?do_not_delete ) then
   echo Files left in $TMP
else
   rm -rf $TMP
endif

exit $mystat
