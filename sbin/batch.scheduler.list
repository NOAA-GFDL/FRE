#!/usr/bin/env perl
# -*- cperl -*-

# $Id: batch.scheduler.list,v 1.1.2.1 2012/08/29 22:01:36 afy Exp $
# ------------------------------------------------------------------------------
# FMS/FRE Project: Program to List Batch Scheduler Jobs in a Uniform Format
# ------------------------------------------------------------------------------
# afy    Ver   1.00  Copied from NCRC version (and modified)        August 12
# ------------------------------------------------------------------------------
# Copyright (C) NOAA Geophysical Fluid Dynamics Laboratory, 2000-2012
# Designed and written by V. Balaji, Amy Langenhorst and Aleksey Yakovlev
#

use strict;

use File::Basename();
use Getopt::Long( ':config', 'no_ignore_case', 'no_auto_abbrev' );
use XML::LibXML();

use Slurm::Utils;

{

    package batch_scheduler_list;

    use constant VERSION => 'v2.0.0_beta';

    use constant OPTLIST => (
        'help|h',          'name|n=s',       'feature|f=s', 'retries-number|N=i',
        'retry-delay|D=i', 'running|R',      'user|u=s',    'verbose|v+',
        'version|V',       'partitions|p=s', 'clusters|M=s'
    );

    use constant RETRIES_NUMBER => 30;
    use constant RETRY_DELAY    => 6;

    my $self = File::Basename::basename($0);

    sub Usage()

        # ------ arguments: none
    {
        my $rtn = RETRIES_NUMBER;
        my $rtd = RETRY_DELAY;
        return (
            "\n",
            "  Usage: $self [option] ...\n\n",
            "  Options:\n\n",
            "   -n STRING, --name=STRING          list jobs with name STRING\n",
            "   -f STRING, --feature=STRING       list jobs with the feature request STRING\n",
            "   -u STRING, --user=STRING          list jobs owned by a user STRING\n",
            "   -M STRING, --clusters=STRING      list jobs in the cluster STRING (comma separated)\n",
            "   -p STRING, --partitions=STRING    list jobs in the partitions STRING (comma separated)\n",
            "   -R,        --running              list jobs in the running state only\n\n",
            "   -N NUM,    --retries-number=NUM   a number NUM of retries (default is '$rtn')\n",
            "   -D NUM,    --retry-delay=NUM      a delay NUM between retries (default is '$rtd'), in seconds\n\n",
            "   -h,        --help                 print the help message and exit\n",
            "   -V,        --version              print the tool version and exit\n",
            "   -v         --verbose              increase verbosity\n\n"
        );
    }

    sub Help()

        # ------ arguments: none
    {
        my @usage = Usage();
        return (
            "\n",
            "   Synopsis: The '$self' lists batch scheduler jobs in the standard format 'id,name,state,submitted-timestamp,user'.\n",
            "@usage",
            "   Possible job states are ('blocked', 'completed', 'failed', 'running', 'waiting').\n\n"
        );
    }

}

# //////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////// Main //
# //////////////////////////////////////////////////////////////////////////////

{

    my %opt = (
        'retries-number' => batch_scheduler_list::RETRIES_NUMBER,
        'retry-delay'    => batch_scheduler_list::RETRY_DELAY
    );

    Getopt::Long::GetOptions( \%opt, batch_scheduler_list::OPTLIST )
        or ( print batch_scheduler_list::Usage() and exit 1 );
    if ( $opt{version} ) { print batch_scheduler_list::VERSION, "\n" and exit 0; }
    if ( $opt{help} ) { print batch_scheduler_list::Help() and exit 0; }

    if ( $opt{clusters} ) {
      # Check if all clusters are valid
      $opt{clusters} = valid_slurm_clusters(split(',',$opt{clusters}));
      if ( $opt{clusters} =~ /^\s*$/ ) {
        print STDERR "No known Slurm clusters given.\n";
        exit 1;
      }
    }

    if ( scalar(@ARGV) == 0 ) {
        # in order to get the time in the desired format (for batch.scheduler.submit), seconds since 1970-1-1,
        # we need to use the SLURM_TIME_FORMAT environment variable
        my $queryCall = 'env SLURM_TIME_FORMAT=%s squeue -h -o "%i,%j,%T,%V,%u"';
        $queryCall .= " -u $opt{user}"        if $opt{user};
        $queryCall .= " -t running"           if $opt{running};
        $queryCall .= " --clusters=$opt{clusters}" if $opt{clusters};
        $queryCall .= " --partitions=$opt{partitions}" if $opt{partitions};
        my $retry  = 0;
        while (1) {
            print STDERR "$queryCall\n" if $opt{verbose};
            chomp( my $res = qx($queryCall) );
            if ( $? == 0 ) {
                print STDERR "$res\n\n" if $opt{verbose} > 1;
                for ( split "\n", $res ) {
                    next if ( $_ =~ /^\s*$/ || $_ =~ /^CLUSTER:/ );
                    my ($id, $name, $state, $time, $user, $features, $qos) = split(',', $_);
                    if ($id =~ /CLUSTER:/) {
                      print "Hello\n";
                      next;
                    }
                    if ($opt{feature}) {
                        next unless $features =~ /\b$opt{feature}\b/;
                    }
                    if ($opt{name}) {
                        next unless $name eq $opt{name};
                    }
                    my $summary_state = simplified_state($state);
                    print "$id,$name,$summary_state,$time,$user\n";
                }
                exit 0;
            }
            elsif ( $retry < $opt{'retries-number'} ) {
                print STDERR "Retrying batch system query ($retry)...\n";
                sleep $opt{'retry-delay'};
                $retry++;
            }
            else {
                print STDERR "No more retries\n";
                exit 1;
            }
        } ## end while (1)
    } ## end if ( scalar(@ARGV) == ...)
    else {
        print STDERR "No extra arguments are allowed\n";
        exit 1;
    }

}
