#!/usr/bin/env perl

# =========================================================================
# Copyright (C) 2010, 2011 Seth Underwood
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
# =========================================================================

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use POSIX qw(ceil floor);
use List::Util qw(max);

#### main
{
    my $Version = '3.1.1';
    my $Date    = '28 Dec 2011';

    # Variables to hold passed in values.
    my $help            = 0;
    my $version         = 0;
    my $verbose         = 0;
    my $omp_num_threads = 1;
    my $mpi_threads     = 1;
    my $atm_pes         = 0;
    my $ocn_pes         = 0;
    my $host            = '';
    my $aprun           = 0;
    my $force           = 0;

    # Get Options
    my $optParser = new Getopt::Long::Parser;
    $optParser->configure( 'posix_default', 'no_ignore_case' );
    $optParser->getoptions(
        "help|h"    => sub { pod2usage(1) },
        "version|V" => sub { displayVersion( $Version, $Date ); exit(0); },
        "verbose|v" => \$verbose,
        "host|H=s"  => \$host,
        "mpi|M=i"   => \$mpi_threads,
        "atm|A=i"   => \$atm_pes,
        "ocn|O=i"   => \$ocn_pes,
        "omp|o=i"   => \$omp_num_threads,
        "aprun|a"   => \$aprun,
        "force|f"   => \$force,
    ) or pod2usage(2);

    # Use $mpi_threads if no $atm_pes given.
    $mpi_threads = $atm_pes if ($atm_pes);

    # Hash to hold cores per node
    my %num_cores_per_node = (
        jaguar   => 4,
        jaguarpf => 12,
        gaea     => 24,
        gaea2    => 32,
    );
    my %valid_omp_threads = (
        jaguar   => '1, 2, or 4',
        jaguarpf => '1, 2, 3, 4, 6, or 12',
        gaea     => '1, 2, 3, 4, 6, 12, or 24',
        gaea2    => '1, 2, 4, 8, 16, or 32',
    );

    # Hash to hold results.
    my %request_pes;

    # If both $atm_pes and $ocn_pes are blank, use $mpi_threads.
    if ( $num_cores_per_node{$host} ) {
        $request_pes{$host} = 0;
        $request_pes{$host}
            = calc_request_pes( $mpi_threads, $omp_num_threads, $num_cores_per_node{$host},
            $force );
        if ( $request_pes{$host} >= 0 ) {
            $request_pes{$host} += calc_request_pes( $ocn_pes, 1, $num_cores_per_node{$host} )
                if ($ocn_pes);
        }
    }
    else {
        print "WARNING: Unknown host '$host'.  Showing default list of hosts.\n\n" if ($host);
        foreach my $myhost ( keys(%num_cores_per_node) ) {
            $request_pes{$myhost} = 0;
            $request_pes{$myhost}
                = calc_request_pes( $mpi_threads, $omp_num_threads, $num_cores_per_node{$myhost},
                $force );
            if ( $request_pes{$myhost} >= 0 ) {
                $request_pes{$myhost}
                    += calc_request_pes( $ocn_pes, 1, $num_cores_per_node{$myhost} )
                    if ($ocn_pes);
            }
        }
    }

    # Display ocn and atm pes if given.
    if ( !$aprun or ( $aprun and $verbose ) ) {
        if ($atm_pes) {
            print "Atmosphere PEs = $atm_pes\n";
        }
        else {
            print "MPI PEs = $mpi_threads\n";
        }
        if ($ocn_pes) {
            print "Ocean PEs = $ocn_pes\n";
        }
        print "OMP_NUM_THREADS = $omp_num_threads\n";
        print "Need to request (host: num_pes [(wasting: num_pes)])\n";

        foreach my $myhost ( sort keys(%request_pes) ) {
            if ( $request_pes{$myhost} > 0 ) {
                my $wasted = calc_wasted_pes( $request_pes{$myhost}, $mpi_threads, $ocn_pes,
                    $omp_num_threads, $num_cores_per_node{$myhost} );
                print "$myhost: $request_pes{$myhost} PEs ";
                print "(wasting: $wasted PEs)" if ($wasted);
                print "\n";
            }
            elsif ( $request_pes{$myhost} == -2 ) {
                print
                    "$myhost: Configuration not efficient. (Try setting number of OpenMP threads to $valid_omp_threads{$myhost}.)\n";
            }
            else {
                print "$myhost: Cannot run on this host.\n";
            }
        }
    } ## end if ( !$aprun or ( $aprun...))

    # Display if only able to run on selected host(s).
    if ($aprun) {
        print "\naprun command:\n" if ($verbose);
        if ( max( values(%request_pes) ) > 0 ) {
            print "aprun -n $mpi_threads -d $omp_num_threads " . './${executable:t}';
            print " : -n $ocn_pes " . './${executable:t}' if ($ocn_pes);
            print "\n";
        }
        else {
            print STDERR
                "ERROR: Not able to run on selected host(s) with the given configuration.\n";
        }
    }
}

sub calc_wasted_pes {
    my ( $req, $atm, $ocn, $omp, $cpm ) = @_;

    my $wasted = $req - ( $atm * $omp + $ocn );

    return $wasted;
}

sub calc_request_pes {
    my ( $mpi, $omp, $cpn, $force ) = @_;
    my $rvalue;

    if ( $omp > $cpn ) {
        $rvalue = -1;
    }
    elsif ( $cpn % $omp and !$force ) {
        $rvalue = -2;
    }
    else {
        $rvalue = ceil( $mpi / floor( $cpn / $omp ) ) * $cpn;
    }

    return $rvalue;
}

sub displayVersion {
    my ( $version, $date ) = @_;

    print "calcPErequest $version ($date)\n";
}
__END__

=head1 NAME

calcPErequest - Calculates the number of PEs required for a given host, with a given OMP_NUM_THREADS

=head1 SYNOPSIS

calcPErequest [-h] [-a] [-host <host>] [-mpi <MPI_PEs> | -atm <ATM_PES>] [-ocn <OCN_PES>] [-omp <OMP_NUM_THREADS>]

=head1 DESCRIPTION

I<calcPErequest> calculates the number of PEs required for a given host, with a given OMP_NUM_THREADS.

=head1 OPTIONS

=over 8

=item B<-h>, B<--help>

Display usage information.

=item B<-H>, B<--host> <host>

Calculate the required PEs for this host.  If host is unknown, then all known hosts will be displayed.  Valid hosts are: I<jaguar>, I<jaguarpf>, I<gaea>, I<gaea2>.

=item B<-M>, B<--mpi> <MPI_PEs>

Number of MPI processes in hybrid MPI/OpenMP.  If I<-atm <ATM_PES>> is given, the <ATM_PES> value is used. B<Default: 1>

=item B<-A>, B<--atm> <ATM_PEs>

Number of atmosphere processes.  Overrides I<-mpi <MPI_PEs>> if given.

=item B<-O>, B<--ocn> <OCN_PEs>

Number of ocean processes.  Ocean processes not used in OpenMP calculations.

=item B<-o>, B<--omp> <OMP_NUM_THREADS>

Number of OpenMP threads per MPI/Atmosphere process.  B<Default: 1>

=item B<-a>, B<--aprun>

Display only the I<aprun> command for the given setup.

=item B<-f>, B<--force>

Force the calculations to be done, even if the configuration is inefficient.

=item B<-v>, B<--verbose>

Be verbose in the output.  Useful when using the --aprun option.

=item B<-V>, B<--version>

Display the version information, and exit.

=back

=head1 EXAMPLES

=begin html

<pre style="margin-left: 2cm">
&gt; calcPErequest --host gaea2 --atm 270 --ocn 1070 --omp 4 -a -v
Atmosphere PEs = 270
Ocean PEs = 1070
OMP_NUM_THREADS = 4
Need to request (host: num_pes [(wasting: num_pes)])
gaea2: 2176 PEs (wasting: 26 PEs)

aprun command:
aprun -n 270 -d 4 ./${executable:t} : -n 1070 ./${executable:t}
</pre>

=end html

=begin man

 > calcPErequest --host gaea2 --atm 270 --ocn 1070 --omp 4 -a -v
 Atmosphere PEs = 270
 Ocean PEs = 1070
 OMP_NUM_THREADS = 4
 Need to request (host: num_pes [(wasting: num_pes)])
 gaea2: 2176 PEs (wasting: 26 PEs)

 aprun command:
 aprun -n 270 -d 4 ./${executable:t} : -n 1070 ./${executable:t}

=end man

=head1 BUGS

No known bugs.  Report all bugs to the author.

=head1 AUTHOR

Seth Underwood <SUnderwood@DRC.com>

=head1 SEE ALSO

B<aprun>(1)

=head1 COPYRIGHT AND LICENSE

Copyright 2010, 2011 Seth Underwood <SUnderwood@DRC.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
